if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher")}(jQuery),function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",function(){n=!0});var r=function(){n||t(i).trigger(t.support.transition.end)};return setTimeout(r,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var n=t(this),r=n.data("bs.alert");r||n.data("bs.alert",r=new i(this)),"string"==typeof e&&r[e].call(n)})}var n='[data-dismiss="alert"]',i=function(e){t(e).on("click",n,this.close)};i.VERSION="3.3.1",i.TRANSITION_DURATION=150,i.prototype.close=function(e){function n(){a.detach().trigger("closed.bs.alert").remove()}var r=t(this),o=r.attr("data-target");o||(o=r.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,""));var a=t(o);e&&e.preventDefault(),a.length||(a=r.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",n).emulateTransitionEnd(i.TRANSITION_DURATION):n())};var r=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=r,this},t(document).on("click.bs.alert.data-api",n,i.prototype.close)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.button"),o="object"==typeof e&&e;r||i.data("bs.button",r=new n(this,o)),"toggle"==e?r.toggle():e&&r.setState(e)})}var n=function(e,i){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,i),this.isLoading=!1};n.VERSION="3.3.1",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",i=this.$element,r=i.is("input")?"val":"html",o=i.data();e+="Text",null==o.resetText&&i.data("resetText",i[r]()),setTimeout(t.proxy(function(){i[r](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")&&(n.prop("checked")&&this.$element.hasClass("active")?t=!1:e.find(".active").removeClass("active")),t&&n.prop("checked",!this.$element.hasClass("active")).trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active"));t&&this.$element.toggleClass("active")};var i=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=i,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var i=t(n.target);i.hasClass("btn")||(i=i.closest(".btn")),e.call(i,"toggle"),n.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.carousel"),o=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e),a="string"==typeof e?e:o.slide;r||i.data("bs.carousel",r=new n(this,o)),"number"==typeof e?r.to(e):a?r[a]():o.interval&&r.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=this.sliding=this.interval=this.$active=this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.1",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n="prev"==t?-1:1,i=this.getItemIndex(e),r=(i+n)%this.$items.length;return this.$items.eq(r)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){if(!this.sliding)return this.slide("next")},n.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},n.prototype.slide=function(e,i){var r=this.$element.find(".item.active"),o=i||this.getItemForDirection(e,r),a=this.interval,s="next"==e?"left":"right",l="next"==e?"first":"last",c=this;if(!o.length){if(!this.options.wrap)return;o=this.$element.find(".item")[l]()}if(o.hasClass("active"))return this.sliding=!1;var u=o[0],d=t.Event("slide.bs.carousel",{relatedTarget:u,direction:s});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(o)]);f&&f.addClass("active")}var p=t.Event("slid.bs.carousel",{relatedTarget:u,direction:s});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,r.addClass(s),o.addClass(s),r.one("bsTransitionEnd",function(){o.removeClass([e,s].join(" ")).addClass("active"),r.removeClass(["active",s].join(" ")),c.sliding=!1,setTimeout(function(){c.$element.trigger(p)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(r.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(p)),a&&this.cycle(),this}};var i=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=i,this};var r=function(n){var i,r=t(this),o=t(r.attr("data-target")||(i=r.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var a=t.extend({},o.data(),r.data()),s=r.attr("data-slide-to");s&&(a.interval=!1),e.call(o,a),s&&o.data("bs.carousel").to(s),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",r).on("click.bs.carousel.data-api","[data-slide-to]",r),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),function(t){"use strict";function e(e){var n,i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(i)}function n(e){return this.each(function(){var n=t(this),r=n.data("bs.collapse"),o=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);!r&&o.toggle&&"show"==e&&(o.toggle=!1),r||n.data("bs.collapse",r=new i(this,o)),"string"==typeof e&&r[e]()})}var i=function(e,n){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,n),this.$trigger=t(this.options.trigger).filter('[href="#'+e.id+'"], [data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};i.VERSION="3.3.1",i.TRANSITION_DURATION=350,i.DEFAULTS={toggle:!0,trigger:'[data-toggle="collapse"]'},i.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},i.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,r=this.$parent&&this.$parent.find("> .panel").children(".in, .collapsing");if(!(r&&r.length&&(e=r.data("bs.collapse"))&&e.transitioning)){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){r&&r.length&&(n.call(r,"hide"),e||r.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var s=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return s.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(s,this)).emulateTransitionEnd(i.TRANSITION_DURATION)[a](this.$element[0][l])}}}},i.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var r=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return r.call(this);this.$element[n](0).one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(i.TRANSITION_DURATION)}}},i.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},i.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,i){var r=t(i);this.addAriaAndCollapsedClass(e(r),r)},this)).end()},i.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var r=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=i,t.fn.collapse.noConflict=function(){return t.fn.collapse=r,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(i){var r=t(this);r.attr("data-target")||i.preventDefault();var o=e(r),a=o.data("bs.collapse"),s=a?"toggle":t.extend({},r.data(),{trigger:this});n.call(o,s)})}(jQuery),function(t){"use strict";function e(e){e&&3===e.which||(t(r).remove(),t(o).each(function(){var i=t(this),r=n(i),o={relatedTarget:this};r.hasClass("open")&&(r.trigger(e=t.Event("hide.bs.dropdown",o)),e.isDefaultPrevented()||(i.attr("aria-expanded","false"),r.removeClass("open").trigger("hidden.bs.dropdown",o)))}))}function n(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i=n&&t(n);return i&&i.length?i:e.parent()}function i(e){return this.each(function(){var n=t(this),i=n.data("bs.dropdown");i||n.data("bs.dropdown",i=new a(this)),"string"==typeof e&&i[e].call(n)})}var r=".dropdown-backdrop",o='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.1",a.prototype.toggle=function(i){var r=t(this);if(!r.is(".disabled, :disabled")){var o=n(r),a=o.hasClass("open");if(e(),!a){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t('<div class="dropdown-backdrop"/>').insertAfter(t(this)).on("click",e);var s={relatedTarget:this};if(o.trigger(i=t.Event("show.bs.dropdown",s)),i.isDefaultPrevented())return;r.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger("shown.bs.dropdown",s)}return!1}},a.prototype.keydown=function(e){if(/(38|40|27|32)/.test(e.which)&&!/input|textarea/i.test(e.target.tagName)){var i=t(this);if(e.preventDefault(),e.stopPropagation(),!i.is(".disabled, :disabled")){var r=n(i),a=r.hasClass("open");if(!a&&27!=e.which||a&&27==e.which)return 27==e.which&&r.find(o).trigger("focus"),i.trigger("click");var s=" li:not(.divider):visible a",l=r.find('[role="menu"]'+s+', [role="listbox"]'+s);if(l.length){var c=l.index(e.target);38==e.which&&c>0&&c--,40==e.which&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var s=t.fn.dropdown;t.fn.dropdown=i,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=s,this},t(document).on("click.bs.dropdown.data-api",e).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,a.prototype.toggle).on("keydown.bs.dropdown.data-api",o,a.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="menu"]',a.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="listbox"]',a.prototype.keydown)}(jQuery),function(t){"use strict";function e(e,i){return this.each(function(){var r=t(this),o=r.data("bs.modal"),a=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e);o||r.data("bs.modal",o=new n(this,a)),"string"==typeof e?o[e](i):a.show&&o.show(i)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.1",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var i=this,r=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(r),this.isShown||r.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.backdrop(function(){var r=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.options.backdrop&&i.adjustBackdrop(),i.adjustDialog(),r&&i.$element[0].offsetWidth,i.$element.addClass("in").attr("aria-hidden",!1),i.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});r?i.$element.find(".modal-dialog").one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(n.TRANSITION_DURATION):i.$element.trigger("focus").trigger(o)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var i=this,r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&r;if(this.$backdrop=t('<div class="modal-backdrop '+r+'" />').prependTo(this.$element).on("click.dismiss.bs.modal",t.proxy(function(t){t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){i.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},n.prototype.handleUpdate=function(){this.options.backdrop&&this.adjustBackdrop(),this.adjustDialog()},n.prototype.adjustBackdrop=function(){this.$backdrop.css("height",0).css("height",this.$element[0].scrollHeight)},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){this.bodyIsOverflowing=document.body.scrollHeight>document.documentElement.clientHeight,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var i=t(this),r=i.attr("href"),o=t(i.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),a=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(r)&&r},o.data(),i.data());i.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),e.call(o,a,this)})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tooltip"),o="object"==typeof e&&e,a=o&&o.selector;(r||"destroy"!=e)&&(a?(r||i.data("bs.tooltip",r={}),r[a]||(r[a]=new n(this,o))):r||i.data("bs.tooltip",r=new n(this,o)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",t,e)};n.VERSION="3.3.1",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,i){this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&t(this.options.viewport.selector||this.options.viewport);for(var r=this.options.trigger.split(" "),o=r.length;o--;){var a=r[o];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var s="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,i){n[t]!=i&&(e[t]=i)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n&&n.$tip&&n.$tip.is(":visible")?void(n.hoverState="in"):(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="out",!n.options.delay||!n.options.delay.hide)return n.hide();n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var i=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!i)return;var r=this,o=this.tip(),a=this.getUID(this.type);this.setContent(),o.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&o.addClass("fade");var s="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,c=l.test(s);c&&(s=s.replace(l,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(s).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element);var u=this.getPosition(),d=o[0].offsetWidth,f=o[0].offsetHeight;if(c){var p=s,h=this.options.container?t(this.options.container):this.$element.parent(),m=this.getPosition(h);s="bottom"==s&&u.bottom+f>m.bottom?"top":"top"==s&&u.top-f<m.top?"bottom":"right"==s&&u.right+d>m.width?"left":"left"==s&&u.left-d<m.left?"right":s,o.removeClass(p).addClass(s)}var g=this.getCalculatedOffset(s,u,d,f);this.applyPlacement(g,s);var v=function(){var t=r.hoverState;r.$element.trigger("shown.bs."+r.type),r.hoverState=null,"out"==t&&r.leave(r)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",v).emulateTransitionEnd(n.TRANSITION_DURATION):v()}},n.prototype.applyPlacement=function(e,n){var i=this.tip(),r=i[0].offsetWidth,o=i[0].offsetHeight,a=parseInt(i.css("margin-top"),10),s=parseInt(i.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(s)&&(s=0),e.top=e.top+a,e.left=e.left+s,t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),i.addClass("in");var l=i[0].offsetWidth,c=i[0].offsetHeight;"top"==n&&c!=o&&(e.top=e.top+o-c);var u=this.getViewportAdjustedDelta(n,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var d=/top|bottom/.test(n),f=d?2*u.left-r+l:2*u.top-o+c,p=d?"offsetWidth":"offsetHeight";i.offset(e),this.replaceArrow(f,i[0][p],d)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function i(){"in"!=r.hoverState&&o.detach(),r.$element.removeAttr("aria-describedby").trigger("hidden.bs."+r.type),e&&e()}var r=this,o=this.tip(),a=t.Event("hide.bs."+this.type);if(this.$element.trigger(a),!a.isDefaultPrevented())return o.removeClass("in"),t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",i).emulateTransitionEnd(n.TRANSITION_DURATION):i(),this.hoverState=null,this},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],i="BODY"==n.tagName,r=n.getBoundingClientRect();null==r.width&&(r=t.extend({},r,{width:r.right-r.left,height:r.bottom-r.top}));var o=i?{top:0,left:0}:e.offset(),a={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},s=i?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},r,a,s,o)},n.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,i){var r={top:0,left:0};if(!this.$viewport)return r;var o=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-o-a.scroll,l=e.top+o-a.scroll+i;s<a.top?r.top=a.top-s:l>a.top+a.height&&(r.top=a.top+a.height-l)}else{var c=e.left-o,u=e.left+o+n;c<a.left?r.left=a.left-c:u>a.width&&(r.left=a.left+a.width-u)}return r},n.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},n.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},n.prototype.tip=function(){return this.$tip=this.$tip||t(this.options.template)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&((n=t(e.currentTarget).data("bs."+this.type))||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type)})};var i=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=i,this}}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.popover"),o="object"==typeof e&&e,a=o&&o.selector;(r||"destroy"!=e)&&(a?(r||i.data("bs.popover",r={}),r[a]||(r[a]=new n(this,o))):r||i.data("bs.popover",r=new n(this,o)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.1",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},n.prototype.tip=function(){return this.$tip||(this.$tip=t(this.options.template)),this.$tip};var i=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=i,this}}(jQuery),function(t){"use strict";function e(n,i){var r=t.proxy(this.process,this);this.$body=t("body"),this.$scrollElement=t(t(n).is("body")?window:n),this.options=t.extend({},e.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",r),this.refresh(),this.process()}function n(n){return this.each(function(){var i=t(this),r=i.data("bs.scrollspy"),o="object"==typeof n&&n;r||i.data("bs.scrollspy",r=new e(this,o)),"string"==typeof n&&r[n]()})}e.VERSION="3.3.1",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e="offset",n=0;t.isWindow(this.$scrollElement[0])||(e="position",n=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var i=this;this.$body.find(this.selector).map(function(){var i=t(this),r=i.data("target")||i.attr("href"),o=/^#./.test(r)&&t(r);return o&&o.length&&o.is(":visible")&&[[o[e]().top+n,r]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){i.offsets.push(this[0]),i.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),r=this.offsets,o=this.targets,a=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=i)return a!=(t=o[o.length-1])&&this.activate(t);if(a&&e<r[0])return this.activeTarget=null,this.clear();for(t=r.length;t--;)a!=o[t]&&e>=r[t]&&(!r[t+1]||e<=r[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',i=t(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var i=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=i,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tab");r||i.data("bs.tab",r=new n(this)),"string"==typeof e&&r[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.1",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=e.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var r=n.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:r[0]});if(r.trigger(o),e.trigger(a),!a.isDefaultPrevented()&&!o.isDefaultPrevented()){var s=t(i);this.activate(e.closest("li"),n),this.activate(s,s.parent(),function(){r.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),
e.trigger({type:"shown.bs.tab",relatedTarget:r[0]})})}}},n.prototype.activate=function(e,i,r){function o(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),s?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu")&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),r&&r()}var a=i.find("> .active"),s=r&&t.support.transition&&(a.length&&a.hasClass("fade")||!!i.find("> .fade").length);a.length&&s?a.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o(),a.removeClass("in")};var i=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=i,this};var r=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',r).on("click.bs.tab.data-api",'[data-toggle="pill"]',r)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.affix"),o="object"==typeof e&&e;r||i.data("bs.affix",r=new n(this,o)),"string"==typeof e&&r[e]()})}var n=function(e,i){this.options=t.extend({},n.DEFAULTS,i),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.1",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,i){var r=this.$target.scrollTop(),o=this.$element.offset(),a=this.$target.height();if(null!=n&&"top"==this.affixed)return r<n&&"top";if("bottom"==this.affixed)return null!=n?!(r+this.unpin<=o.top)&&"bottom":!(r+a<=t-i)&&"bottom";var s=null==this.affixed,l=s?r:o.top,c=s?a:e;return null!=n&&l<=n?"top":null!=i&&l+c>=t-i&&"bottom"},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),i=this.options.offset,r=i.top,o=i.bottom,a=t("body").height();"object"!=typeof i&&(o=r=i),"function"==typeof r&&(r=i.top(this.$element)),"function"==typeof o&&(o=i.bottom(this.$element));var s=this.getState(a,e,r,o);if(this.affixed!=s){null!=this.unpin&&this.$element.css("top","");var l="affix"+(s?"-"+s:""),c=t.Event(l+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=s,this.unpin="bottom"==s?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==s&&this.$element.offset({top:a-e-o})}};var i=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=i,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),i=n.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),e.call(n,i)})})}(jQuery),function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=!!t&&"length"in t&&t.length,n=ft.type(t);return"function"!==n&&!ft.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function i(t,e,n){if(ft.isFunction(e))return ft.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return ft.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(bt.test(e))return ft.filter(e,t,n);e=ft.filter(e,t)}return ft.grep(t,function(t){return ft.inArray(t,e)>-1!==n})}function r(t,e){do{t=t[e]}while(t&&1!==t.nodeType);return t}function o(t){var e={};return ft.each(t.match(Et)||[],function(t,n){e[n]=!0}),e}function a(){it.addEventListener?(it.removeEventListener("DOMContentLoaded",s),t.removeEventListener("load",s)):(it.detachEvent("onreadystatechange",s),t.detachEvent("onload",s))}function s(){(it.addEventListener||"load"===t.event.type||"complete"===it.readyState)&&(a(),ft.ready())}function l(t,e,n){if(void 0===n&&1===t.nodeType){var i="data-"+e.replace(At,"-$1").toLowerCase();if("string"==typeof(n=t.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:$t.test(n)?ft.parseJSON(n):n)}catch(t){}ft.data(t,e,n)}else n=void 0}return n}function c(t){var e;for(e in t)if(("data"!==e||!ft.isEmptyObject(t[e]))&&"toJSON"!==e)return!1;return!0}function u(t,e,n,i){if(Nt(t)){var r,o,a=ft.expando,s=t.nodeType,l=s?ft.cache:t,c=s?t[a]:t[a]&&a;if(c&&l[c]&&(i||l[c].data)||void 0!==n||"string"!=typeof e)return c||(c=s?t[a]=nt.pop()||ft.guid++:a),l[c]||(l[c]=s?{}:{toJSON:ft.noop}),"object"!=typeof e&&"function"!=typeof e||(i?l[c]=ft.extend(l[c],e):l[c].data=ft.extend(l[c].data,e)),o=l[c],i||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[ft.camelCase(e)]=n),"string"==typeof e?null==(r=o[e])&&(r=o[ft.camelCase(e)]):r=o,r}}function d(t,e,n){if(Nt(t)){var i,r,o=t.nodeType,a=o?ft.cache:t,s=o?t[ft.expando]:ft.expando;if(a[s]){if(e&&(i=n?a[s]:a[s].data)){ft.isArray(e)?e=e.concat(ft.map(e,ft.camelCase)):e in i?e=[e]:(e=ft.camelCase(e),e=e in i?[e]:e.split(" ")),r=e.length;for(;r--;)delete i[e[r]];if(n?!c(i):!ft.isEmptyObject(i))return}(n||(delete a[s].data,c(a[s])))&&(o?ft.cleanData([t],!0):dt.deleteExpando||a!=a.window?delete a[s]:a[s]=void 0)}}}function f(t,e,n,i){var r,o=1,a=20,s=i?function(){return i.cur()}:function(){return ft.css(t,e,"")},l=s(),c=n&&n[3]||(ft.cssNumber[e]?"":"px"),u=(ft.cssNumber[e]||"px"!==c&&+l)&&jt.exec(ft.css(t,e));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{o=o||".5",u/=o,ft.style(t,e,u+c)}while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}function p(t){var e=Ft.split("|"),n=t.createDocumentFragment();if(n.createElement)for(;e.length;)n.createElement(e.pop());return n}function h(t,e){var n,i,r=0,o=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):void 0;if(!o)for(o=[],n=t.childNodes||t;null!=(i=n[r]);r++)!e||ft.nodeName(i,e)?o.push(i):ft.merge(o,h(i,e));return void 0===e||e&&ft.nodeName(t,e)?ft.merge([t],o):o}function m(t,e){for(var n,i=0;null!=(n=t[i]);i++)ft._data(n,"globalEval",!e||ft._data(e[i],"globalEval"))}function g(t){Ht.test(t.type)&&(t.defaultChecked=t.checked)}function v(t,e,n,i,r){for(var o,a,s,l,c,u,d,f=t.length,v=p(e),y=[],b=0;b<f;b++)if((a=t[b])||0===a)if("object"===ft.type(a))ft.merge(y,a.nodeType?[a]:a);else if(_t.test(a)){for(l=l||v.appendChild(e.createElement("div")),c=(Rt.exec(a)||["",""])[1].toLowerCase(),d=Mt[c]||Mt._default,l.innerHTML=d[1]+ft.htmlPrefilter(a)+d[2],o=d[0];o--;)l=l.lastChild;if(!dt.leadingWhitespace&&qt.test(a)&&y.push(e.createTextNode(qt.exec(a)[0])),!dt.tbody)for(a="table"!==c||Bt.test(a)?"<table>"!==d[1]||Bt.test(a)?0:l:l.firstChild,o=a&&a.childNodes.length;o--;)ft.nodeName(u=a.childNodes[o],"tbody")&&!u.childNodes.length&&a.removeChild(u);for(ft.merge(y,l.childNodes),l.textContent="";l.firstChild;)l.removeChild(l.firstChild);l=v.lastChild}else y.push(e.createTextNode(a));for(l&&v.removeChild(l),dt.appendChecked||ft.grep(h(y,"input"),g),b=0;a=y[b++];)if(i&&ft.inArray(a,i)>-1)r&&r.push(a);else if(s=ft.contains(a.ownerDocument,a),l=h(v.appendChild(a),"script"),s&&m(l),n)for(o=0;a=l[o++];)Pt.test(a.type||"")&&n.push(a);return l=null,v}function y(){return!0}function b(){return!1}function x(){try{return it.activeElement}catch(t){}}function w(t,e,n,i,r,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(s in e)w(t,s,n,i,e[s],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=b;else if(!r)return t;return 1===o&&(a=r,r=function(t){return ft().off(t),a.apply(this,arguments)},r.guid=a.guid||(a.guid=ft.guid++)),t.each(function(){ft.event.add(this,e,r,i,n)})}function T(t,e){return ft.nodeName(t,"table")&&ft.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function C(t){return t.type=(null!==ft.find.attr(t,"type"))+"/"+t.type,t}function E(t){var e=Yt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function S(t,e){if(1===e.nodeType&&ft.hasData(t)){var n,i,r,o=ft._data(t),a=ft._data(e,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(i=0,r=s[n].length;i<r;i++)ft.event.add(e,n,s[n][i])}a.data&&(a.data=ft.extend({},a.data))}}function k(t,e){var n,i,r;if(1===e.nodeType){if(n=e.nodeName.toLowerCase(),!dt.noCloneEvent&&e[ft.expando]){r=ft._data(e);for(i in r.events)ft.removeEvent(e,i,r.handle);e.removeAttribute(ft.expando)}"script"===n&&e.text!==t.text?(C(e).text=t.text,E(e)):"object"===n?(e.parentNode&&(e.outerHTML=t.outerHTML),dt.html5Clone&&t.innerHTML&&!ft.trim(e.innerHTML)&&(e.innerHTML=t.innerHTML)):"input"===n&&Ht.test(t.type)?(e.defaultChecked=e.checked=t.checked,e.value!==t.value&&(e.value=t.value)):"option"===n?e.defaultSelected=e.selected=t.defaultSelected:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}}function N(t,e,n,i){e=ot.apply([],e);var r,o,a,s,l,c,u=0,d=t.length,f=d-1,p=e[0],m=ft.isFunction(p);if(m||d>1&&"string"==typeof p&&!dt.checkClone&&Gt.test(p))return t.each(function(r){var o=t.eq(r);m&&(e[0]=p.call(this,r,o.html())),N(o,e,n,i)});if(d&&(c=v(e,t[0].ownerDocument,!1,t,i),r=c.firstChild,1===c.childNodes.length&&(c=r),r||i)){for(s=ft.map(h(c,"script"),C),a=s.length;u<d;u++)o=c,u!==f&&(o=ft.clone(o,!0,!0),a&&ft.merge(s,h(o,"script"))),n.call(t[u],o,u);if(a)for(l=s[s.length-1].ownerDocument,ft.map(s,E),u=0;u<a;u++)o=s[u],Pt.test(o.type||"")&&!ft._data(o,"globalEval")&&ft.contains(l,o)&&(o.src?ft._evalUrl&&ft._evalUrl(o.src):ft.globalEval((o.text||o.textContent||o.innerHTML||"").replace(Kt,"")));c=r=null}return t}function $(t,e,n){for(var i,r=e?ft.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||ft.cleanData(h(i)),i.parentNode&&(n&&ft.contains(i.ownerDocument,i)&&m(h(i,"script")),i.parentNode.removeChild(i));return t}function A(t,e){var n=ft(e.createElement(t)).appendTo(e.body),i=ft.css(n[0],"display");return n.detach(),i}function D(t){var e=it,n=ne[t];return n||(n=A(t,e),"none"!==n&&n||(ee=(ee||ft("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=(ee[0].contentWindow||ee[0].contentDocument).document,e.write(),e.close(),n=A(t,e),ee.detach()),ne[t]=n),n}function j(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function L(t){if(t in ve)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=ge.length;n--;)if((t=ge[n]+e)in ve)return t}function O(t,e){for(var n,i,r,o=[],a=0,s=t.length;a<s;a++)i=t[a],i.style&&(o[a]=ft._data(i,"olddisplay"),n=i.style.display,e?(o[a]||"none"!==n||(i.style.display=""),""===i.style.display&&Ot(i)&&(o[a]=ft._data(i,"olddisplay",D(i.nodeName)))):(r=Ot(i),(n&&"none"!==n||!r)&&ft._data(i,"olddisplay",r?n:ft.css(i,"display"))));for(a=0;a<s;a++)i=t[a],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[a]||"":"none"));return t}function I(t,e,n){var i=pe.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function H(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,a=0;o<4;o+=2)"margin"===n&&(a+=ft.css(t,n+Lt[o],!0,r)),i?("content"===n&&(a-=ft.css(t,"padding"+Lt[o],!0,r)),"margin"!==n&&(a-=ft.css(t,"border"+Lt[o]+"Width",!0,r))):(a+=ft.css(t,"padding"+Lt[o],!0,r),"padding"!==n&&(a+=ft.css(t,"border"+Lt[o]+"Width",!0,r)));return a}function R(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=se(t),a=dt.boxSizing&&"border-box"===ft.css(t,"boxSizing",!1,o);if(r<=0||null==r){if(r=le(t,e,o),(r<0||null==r)&&(r=t.style[e]),re.test(r))return r;i=a&&(dt.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+H(t,e,n||(a?"border":"content"),i,o)+"px"}function P(t,e,n,i,r){return new P.prototype.init(t,e,n,i,r)}function q(){return t.setTimeout(function(){ye=void 0}),ye=ft.now()}function F(t,e){var n,i={height:t},r=0;for(e=e?1:0;r<4;r+=2-e)n=Lt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function M(t,e,n){for(var i,r=(W.tweeners[e]||[]).concat(W.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,e,t))return i}function _(t,e,n){var i,r,o,a,s,l,c,u=this,d={},f=t.style,p=t.nodeType&&Ot(t),h=ft._data(t,"fxshow");n.queue||(s=ft._queueHooks(t,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,u.always(function(){u.always(function(){s.unqueued--,ft.queue(t,"fx").length||s.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],c=ft.css(t,"display"),"inline"===("none"===c?ft._data(t,"olddisplay")||D(t.nodeName):c)&&"none"===ft.css(t,"float")&&(dt.inlineBlockNeedsLayout&&"inline"!==D(t.nodeName)?f.zoom=1:f.display="inline-block")),n.overflow&&(f.overflow="hidden",dt.shrinkWrapBlocks()||u.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],xe.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!h||void 0===h[i])continue;p=!0}d[i]=h&&h[i]||ft.style(t,i)}else c=void 0;if(ft.isEmptyObject(d))"inline"===("none"===c?D(t.nodeName):c)&&(f.display=c);else{h?"hidden"in h&&(p=h.hidden):h=ft._data(t,"fxshow",{}),o&&(h.hidden=!p),p?ft(t).show():u.done(function(){ft(t).hide()}),u.done(function(){var e;ft._removeData(t,"fxshow");for(e in d)ft.style(t,e,d[e])});for(i in d)a=M(p?h[i]:0,i,u),i in h||(h[i]=a.start,p&&(a.end=a.start,a.start="width"===i||"height"===i?1:0))}}function B(t,e){var n,i,r,o,a;for(n in t)if(i=ft.camelCase(n),r=e[i],o=t[n],ft.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(a=ft.cssHooks[i])&&"expand"in a){o=a.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function W(t,e,n){var i,r,o=0,a=W.prefilters.length,s=ft.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ye||q(),n=Math.max(0,c.startTime+c.duration-e),i=n/c.duration||0,o=1-i,a=0,l=c.tweens.length;a<l;a++)c.tweens[a].run(o);return s.notifyWith(t,[c,o,n]),o<1&&l?n:(s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:ft.extend({},e),opts:ft.extend(!0,{specialEasing:{},easing:ft.easing._default},n),originalProperties:e,originalOptions:n,startTime:ye||q(),duration:n.duration,tweens:[],createTween:function(e,n){var i=ft.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return e?(s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c,e])):s.rejectWith(t,[c,e]),this}}),u=c.props;for(B(u,c.opts.specialEasing);o<a;o++)if(i=W.prefilters[o].call(c,t,u,c.opts))return ft.isFunction(i.stop)&&(ft._queueHooks(c.elem,c.opts.queue).stop=ft.proxy(i.stop,i)),i;return ft.map(u,M,c),ft.isFunction(c.opts.start)&&c.opts.start.call(t,c),ft.fx.timer(ft.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function z(t){return ft.attr(t,"class")||""}function U(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(Et)||[];if(ft.isFunction(n))for(;i=o[r++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function X(t,e,n,i){function r(s){var l;return o[s]=!0,ft.each(t[s]||[],function(t,s){var c=s(e,n,i);return"string"!=typeof c||a||o[c]?a?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)}),l}var o={},a=t===Fe;return r(e.dataTypes[0])||!o["*"]&&r("*")}function V(t,e){var n,i,r=ft.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((r[i]?t:n||(n={}))[i]=e[i]);return n&&ft.extend(!0,t,n),t}function Q(t,e,n){for(var i,r,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){l.unshift(a);break}if(l[0]in n)o=l[0];else{for(a in n){if(!l[0]||t.converters[a+" "+l[0]]){o=a;break}i||(i=a)}o=o||i}if(o)return o!==l[0]&&l.unshift(o),n[o]}function J(t,e,n,i){var r,o,a,s,l,c={},u=t.dataTypes.slice();if(u[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if(s=r.split(" "),s[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function G(t){return t.style&&t.style.display||ft.css(t,"display")}function Y(t){if(!ft.contains(t.ownerDocument||it,t))return!0;for(;t&&1===t.nodeType;){if("none"===G(t)||"hidden"===t.type)return!0;t=t.parentNode}return!1}function K(t,e,n,i){var r;if(ft.isArray(e))ft.each(e,function(e,r){n||We.test(t)?i(t,r):K(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==ft.type(e))i(t,e);else for(r in e)K(t+"["+r+"]",e[r],n,i)}function Z(){try{return new t.XMLHttpRequest}catch(t){}}function tt(){try{return new t.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function et(t){return ft.isWindow(t)?t:9===t.nodeType&&(t.defaultView||t.parentWindow)}var nt=[],it=t.document,rt=nt.slice,ot=nt.concat,at=nt.push,st=nt.indexOf,lt={},ct=lt.toString,ut=lt.hasOwnProperty,dt={},ft=function(t,e){return new ft.fn.init(t,e)},pt=function(t,e){return e.toUpperCase()};ft.fn=ft.prototype={jquery:"1.12.4",constructor:ft,selector:"",length:0,toArray:function(){return rt.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:rt.call(this)},pushStack:function(t){var e=ft.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return ft.each(this,t)},map:function(t){return this.pushStack(ft.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(rt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:at,sort:nt.sort,splice:nt.splice},ft.extend=ft.fn.extend=function(){var t,e,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||ft.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(r=arguments[s]))for(i in r)t=a[i],n=r[i],a!==n&&(c&&n&&(ft.isPlainObject(n)||(e=ft.isArray(n)))?(e?(e=!1,o=t&&ft.isArray(t)?t:[]):o=t&&ft.isPlainObject(t)?t:{},a[i]=ft.extend(c,o,n)):void 0!==n&&(a[i]=n));return a},ft.extend({expando:"jQuery"+("1.12.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===ft.type(t)},isArray:Array.isArray||function(t){return"array"===ft.type(t)},isWindow:function(t){return null!=t&&t==t.window},isNumeric:function(t){var e=t&&t.toString();return!ft.isArray(t)&&e-parseFloat(e)+1>=0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},isPlainObject:function(t){var e;if(!t||"object"!==ft.type(t)||t.nodeType||ft.isWindow(t))return!1;try{if(t.constructor&&!ut.call(t,"constructor")&&!ut.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}if(!dt.ownFirst)for(e in t)return ut.call(t,e);for(e in t);return void 0===e||ut.call(t,e)},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?lt[ct.call(t)]||"object":typeof t},globalEval:function(e){e&&ft.trim(e)&&(t.execScript||function(e){t.eval.call(t,e)})(e)},camelCase:function(t){return t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,pt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,r=0;if(n(t))for(i=t.length;r<i&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?ft.merge(i,"string"==typeof t?[t]:t):at.call(i,t)),i},inArray:function(t,e,n){var i;if(e){if(st)return st.call(e,t,n);for(i=e.length,n=n?n<0?Math.max(0,i+n):n:0;n<i;n++)if(n in e&&e[n]===t)return n}return-1},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;)t[r++]=e[i++];if(n!==n)for(;void 0!==e[i];)t[r++]=e[i++];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,a=!n;r<o;r++)!e(t[r],r)!==a&&i.push(t[r]);return i},map:function(t,e,i){var r,o,a=0,s=[];if(n(t))for(r=t.length;a<r;a++)null!=(o=e(t[a],a,i))&&s.push(o);else for(a in t)null!=(o=e(t[a],a,i))&&s.push(o);return ot.apply([],s)},guid:1,proxy:function(t,e){var n,i,r;if("string"==typeof e&&(r=t[e],e=t,t=r),ft.isFunction(t))return n=rt.call(arguments,2),i=function(){return t.apply(e||this,n.concat(rt.call(arguments)))},i.guid=t.guid=t.guid||ft.guid++,i},now:function(){return+new Date},support:dt}),"function"==typeof Symbol&&(ft.fn[Symbol.iterator]=nt[Symbol.iterator]),ft.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){lt["[object "+e+"]"]=e.toLowerCase()});var ht=function(t){function e(t,e,n,i){var r,o,a,s,c,d,f,p,h=e&&e.ownerDocument,m=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return n;if(!i&&((e?e.ownerDocument||e:q)!==D&&A(e),e=e||D,L)){if(11!==m&&(d=mt.exec(t)))if(r=d[1]){if(9===m){if(!(a=e.getElementById(r)))return n;if(a.id===r)return n.push(a),n}else if(h&&(a=h.getElementById(r))&&R(e,a)&&a.id===r)return n.push(a),n}else{if(d[2])return G.apply(n,e.getElementsByTagName(t)),n;if((r=d[3])&&b.getElementsByClassName&&e.getElementsByClassName)return G.apply(n,e.getElementsByClassName(r)),n}if(b.qsa&&!W[t+" "]&&(!O||!O.test(t))){if(1!==m)h=e,p=t;else if("object"!==e.nodeName.toLowerCase()){for((s=e.getAttribute("id"))?s=s.replace(vt,"\\$&"):e.setAttribute("id",s=P),f=C(t),o=f.length,c=ut.test(s)?"#"+s:"[id='"+s+"']";o--;)f[o]=c+" "+u(f[o]);p=f.join(","),h=gt.test(t)&&l(e.parentNode)||e}if(p)try{return G.apply(n,h.querySelectorAll(p)),n}catch(t){}finally{s===P&&e.removeAttribute("id")}}}return S(t.replace(ot,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[P]=!0,t}function r(t){var e=D.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=e}function a(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||U)-(~t.sourceIndex||U);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function l(t){return t&&void 0!==t.getElementsByTagName&&t}function c(){}function u(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function d(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=M++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,a){var s,l,c,u=[F,o];if(a){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,a))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(c=e[P]||(e[P]={}),l=c[e.uniqueID]||(c[e.uniqueID]={}),(s=l[i])&&s[0]===F&&s[1]===o)return u[2]=s[2];if(l[i]=u,u[2]=t(e,n,a))return!0}}}function f(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function p(t,n,i){for(var r=0,o=n.length;r<o;r++)e(t,n[r],i);return i}function h(t,e,n,i,r){for(var o,a=[],s=0,l=t.length,c=null!=e;s<l;s++)(o=t[s])&&(n&&!n(o,i,r)||(a.push(o),c&&e.push(s)));return a}function m(t,e,n,r,o,a){return r&&!r[P]&&(r=m(r)),o&&!o[P]&&(o=m(o,a)),i(function(i,a,s,l){var c,u,d,f=[],m=[],g=a.length,v=i||p(e||"*",s.nodeType?[s]:s,[]),y=!t||!i&&e?v:h(v,f,t,s,l),b=n?o||(i?t:g||r)?[]:a:y;if(n&&n(y,b,s,l),r)for(c=h(b,m),r(c,[],s,l),u=c.length;u--;)(d=c[u])&&(b[m[u]]=!(y[m[u]]=d));if(i){if(o||t){if(o){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);o(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=o?K(i,d):f[u])>-1&&(i[c]=!(a[c]=d))}}else b=h(b===a?b.splice(g,b.length):b),o?o(null,a,b,l):G.apply(a,b)})}function g(t){for(var e,n,i,r=t.length,o=x.relative[t[0].type],a=o||x.relative[" "],s=o?1:0,l=d(function(t){return t===e},a,!0),c=d(function(t){return K(e,t)>-1},a,!0),p=[function(t,n,i){var r=!o&&(i||n!==k)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,r}];s<r;s++)if(n=x.relative[t[s].type])p=[d(f(p),n)];else{if(n=x.filter[t[s].type].apply(null,t[s].matches),n[P]){for(i=++s;i<r&&!x.relative[t[i].type];i++);return m(s>1&&f(p),s>1&&u(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(ot,"$1"),n,s<i&&g(t.slice(s,i)),i<r&&g(t=t.slice(i)),i<r&&u(t))}p.push(n)}return f(p)}function v(t,n){var r=n.length>0,o=t.length>0,a=function(i,a,s,l,c){var u,d,f,p=0,m="0",g=i&&[],v=[],y=k,b=i||o&&x.find.TAG("*",c),w=F+=null==y?1:Math.random()||.1,T=b.length;for(c&&(k=a===D||a||c);m!==T&&null!=(u=b[m]);m++){if(o&&u){for(d=0,a||u.ownerDocument===D||(A(u),s=!L);f=t[d++];)if(f(u,a||D,s)){l.push(u);break}c&&(F=w)}r&&((u=!f&&u)&&p--,i&&g.push(u))}if(p+=m,r&&m!==p){for(d=0;f=n[d++];)f(g,v,a,s);if(i){if(p>0)for(;m--;)g[m]||v[m]||(v[m]=Q.call(l));v=h(v)}G.apply(l,v),c&&!i&&v.length>0&&p+n.length>1&&e.uniqueSort(l)}return c&&(F=w,k=y),g};return r?i(a):a}var y,b,x,w,T,C,E,S,k,N,$,A,D,j,L,O,I,H,R,P="sizzle"+1*new Date,q=t.document,F=0,M=0,_=n(),B=n(),W=n(),z=function(t,e){return t===e&&($=!0),0},U=1<<31,X={}.hasOwnProperty,V=[],Q=V.pop,J=V.push,G=V.push,Y=V.slice,K=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",nt="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",it=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+nt+")*)|.*)\\)|)",rt=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),at=new RegExp("^"+tt+"*,"+tt+"*"),st=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),lt=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ct=new RegExp(it),ut=new RegExp("^"+et+"$"),dt={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+nt),PSEUDO:new RegExp("^"+it),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},ft=/^(?:input|select|textarea|button)$/i,pt=/^h\d$/i,ht=/^[^{]+\{\s*\[native \w/,mt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,gt=/[+~]/,vt=/'|\\/g,yt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),bt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},xt=function(){A()};try{G.apply(V=Y.call(q.childNodes),q.childNodes),V[q.childNodes.length].nodeType}catch(t){G={apply:V.length?function(t,e){J.apply(t,Y.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}b=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},A=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:q;return i!==D&&9===i.nodeType&&i.documentElement?(D=i,j=D.documentElement,L=!T(D),(n=D.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xt,!1):n.attachEvent&&n.attachEvent("onunload",xt)),b.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=r(function(t){return t.appendChild(D.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=ht.test(D.getElementsByClassName),b.getById=r(function(t){return j.appendChild(t).id=P,!D.getElementsByName||!D.getElementsByName(P).length}),b.getById?(x.find.ID=function(t,e){if(void 0!==e.getElementById&&L){var n=e.getElementById(t);return n?[n]:[]}},x.filter.ID=function(t){var e=t.replace(yt,bt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(yt,bt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),x.find.TAG=b.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},x.find.CLASS=b.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&L)return e.getElementsByClassName(t)},I=[],O=[],(b.qsa=ht.test(D.querySelectorAll))&&(r(function(t){j.appendChild(t).innerHTML="<a id='"+P+"'></a><select id='"+P+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&O.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||O.push("\\["+tt+"*(?:value|"+Z+")"),t.querySelectorAll("[id~="+P+"-]").length||O.push("~="),t.querySelectorAll(":checked").length||O.push(":checked"),t.querySelectorAll("a#"+P+"+*").length||O.push(".#.+[+~]")}),r(function(t){var e=D.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&O.push("name"+tt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||O.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),O.push(",.*:")})),(b.matchesSelector=ht.test(H=j.matches||j.webkitMatchesSelector||j.mozMatchesSelector||j.oMatchesSelector||j.msMatchesSelector))&&r(function(t){b.disconnectedMatch=H.call(t,"div"),H.call(t,"[s!='']:x"),I.push("!=",it)}),O=O.length&&new RegExp(O.join("|")),I=I.length&&new RegExp(I.join("|")),e=ht.test(j.compareDocumentPosition),R=e||ht.test(j.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},z=e?function(t,e){if(t===e)return $=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!b.sortDetached&&e.compareDocumentPosition(t)===n?t===D||t.ownerDocument===q&&R(q,t)?-1:e===D||e.ownerDocument===q&&R(q,e)?1:N?K(N,t)-K(N,e):0:4&n?-1:1)}:function(t,e){if(t===e)return $=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,s=[t],l=[e];if(!r||!o)return t===D?-1:e===D?1:r?-1:o?1:N?K(N,t)-K(N,e):0;if(r===o)return a(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;s[i]===l[i];)i++;return i?a(s[i],l[i]):s[i]===q?-1:l[i]===q?1:0},D):D},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==D&&A(t),n=n.replace(lt,"='$1']"),
b.matchesSelector&&L&&!W[n+" "]&&(!I||!I.test(n))&&(!O||!O.test(n)))try{var i=H.call(t,n);if(i||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,D,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==D&&A(t),R(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==D&&A(t);var n=x.attrHandle[e.toLowerCase()],i=n&&X.call(x.attrHandle,e.toLowerCase())?n(t,e,!L):void 0;return void 0!==i?i:b.attributes||!L?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if($=!b.detectDuplicates,N=!b.sortStable&&t.slice(0),t.sort(z),$){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return N=null,t},w=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=w(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=w(e);return n},x=e.selectors={cacheLength:50,createPseudo:i,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(yt,bt),t[3]=(t[3]||t[4]||t[5]||"").replace(yt,bt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return dt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ct.test(n)&&(e=C(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(yt,bt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=_[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&_(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(rt," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var c,u,d,f,p,h,m=o!==a?"nextSibling":"previousSibling",g=e.parentNode,v=s&&e.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(g){if(o){for(;m;){for(f=e;f=f[m];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=m="only"===t&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(f=g,d=f[P]||(f[P]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[t]||[],p=c[0]===F&&c[1],b=p&&c[2],f=p&&g.childNodes[p];f=++p&&f&&f[m]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===e){u[t]=[F,p,b];break}}else if(y&&(f=e,d=f[P]||(f[P]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[t]||[],p=c[0]===F&&c[1],b=p),!1===b)for(;(f=++p&&f&&f[m]||(b=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&(d=f[P]||(f[P]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),u[t]=[F,b]),f!==e)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(t,n){var r,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[P]?o(n):o.length>1?(r=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),a=r.length;a--;)i=K(t,r[a]),t[i]=!(e[i]=r[a])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=E(t.replace(ot,"$1"));return r[P]?i(function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(yt,bt),function(e){return(e.textContent||e.innerText||w(e)).indexOf(t)>-1}}),lang:i(function(t){return ut.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(yt,bt).toLowerCase(),function(e){var n;do{if(n=L?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===j},focus:function(t){return t===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return!1===t.disabled},disabled:function(t){return!0===t.disabled},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return pt.test(t.nodeName)},input:function(t){return ft.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:s(function(){return[0]}),last:s(function(t,e){return[e-1]}),eq:s(function(t,e,n){return[n<0?n+e:n]}),even:s(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:s(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:s(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:s(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},x.pseudos.nth=x.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[y]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(y);for(y in{submit:!0,reset:!0})x.pseudos[y]=function(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}(y);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,C=e.tokenize=function(t,n){var i,r,o,a,s,l,c,u=B[t+" "];if(u)return n?0:u.slice(0);for(s=t,l=[],c=x.preFilter;s;){i&&!(r=at.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),i=!1,(r=st.exec(s))&&(i=r.shift(),o.push({value:i,type:r[0].replace(ot," ")}),s=s.slice(i.length));for(a in x.filter)!(r=dt[a].exec(s))||c[a]&&!(r=c[a](r))||(i=r.shift(),o.push({value:i,type:a,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?e.error(t):B(t,l).slice(0)},E=e.compile=function(t,e){var n,i=[],r=[],o=W[t+" "];if(!o){for(e||(e=C(t)),n=e.length;n--;)o=g(e[n]),o[P]?i.push(o):r.push(o);o=W(t,v(r,i)),o.selector=t}return o},S=e.select=function(t,e,n,i){var r,o,a,s,c,d="function"==typeof t&&t,f=!i&&C(t=d.selector||t);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&b.getById&&9===e.nodeType&&L&&x.relative[o[1].type]){if(!(e=(x.find.ID(a.matches[0].replace(yt,bt),e)||[])[0]))return n;d&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=dt.needsContext.test(t)?0:o.length;r--&&(a=o[r],!x.relative[s=a.type]);)if((c=x.find[s])&&(i=c(a.matches[0].replace(yt,bt),gt.test(o[0].type)&&l(e.parentNode)||e))){if(o.splice(r,1),!(t=i.length&&u(o)))return G.apply(n,i),n;break}}return(d||E(t,f))(i,e,!L,n,!e||gt.test(t)&&l(e.parentNode)||e),n},b.sortStable=P.split("").sort(z).join("")===P,b.detectDuplicates=!!$,A(),b.sortDetached=r(function(t){return 1&t.compareDocumentPosition(D.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(Z,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);ft.find=ht,ft.expr=ht.selectors,ft.expr[":"]=ft.expr.pseudos,ft.uniqueSort=ft.unique=ht.uniqueSort,ft.text=ht.getText,ft.isXMLDoc=ht.isXML,ft.contains=ht.contains;var mt=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&ft(t).is(n))break;i.push(t)}return i},gt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},vt=ft.expr.match.needsContext,yt=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,bt=/^.[^:#\[\.,]*$/;ft.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?ft.find.matchesSelector(i,t)?[i]:[]:ft.find.matches(t,ft.grep(e,function(t){return 1===t.nodeType}))},ft.fn.extend({find:function(t){var e,n=[],i=this,r=i.length;if("string"!=typeof t)return this.pushStack(ft(t).filter(function(){for(e=0;e<r;e++)if(ft.contains(i[e],this))return!0}));for(e=0;e<r;e++)ft.find(t,i[e],n);return n=this.pushStack(r>1?ft.unique(n):n),n.selector=this.selector?this.selector+" "+t:t,n},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&vt.test(t)?ft(t):t||[],!1).length}});var xt,wt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(ft.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||xt,"string"==typeof t){if(!(i="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:wt.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof ft?e[0]:e,ft.merge(this,ft.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:it,!0)),yt.test(i[1])&&ft.isPlainObject(e))for(i in e)ft.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}if((r=it.getElementById(i[2]))&&r.parentNode){if(r.id!==i[2])return xt.find(t);this.length=1,this[0]=r}return this.context=it,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):ft.isFunction(t)?void 0!==n.ready?n.ready(t):t(ft):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),ft.makeArray(t,this))}).prototype=ft.fn,xt=ft(it);var Tt=/^(?:parents|prev(?:Until|All))/,Ct={children:!0,contents:!0,next:!0,prev:!0};ft.fn.extend({has:function(t){var e,n=ft(t,this),i=n.length;return this.filter(function(){for(e=0;e<i;e++)if(ft.contains(this,n[e]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,o=[],a=vt.test(t)||"string"!=typeof t?ft(t,e||this.context):0;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&ft.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?ft.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?ft.inArray(this[0],ft(t)):ft.inArray(t.jquery?t[0]:t,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(ft.uniqueSort(ft.merge(this.get(),ft(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ft.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return mt(t,"parentNode")},parentsUntil:function(t,e,n){return mt(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return mt(t,"nextSibling")},prevAll:function(t){return mt(t,"previousSibling")},nextUntil:function(t,e,n){return mt(t,"nextSibling",n)},prevUntil:function(t,e,n){return mt(t,"previousSibling",n)},siblings:function(t){return gt((t.parentNode||{}).firstChild,t)},children:function(t){return gt(t.firstChild)},contents:function(t){return ft.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:ft.merge([],t.childNodes)}},function(t,e){ft.fn[t]=function(n,i){var r=ft.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=ft.filter(i,r)),this.length>1&&(Ct[t]||(r=ft.uniqueSort(r)),Tt.test(t)&&(r=r.reverse())),this.pushStack(r)}});var Et=/\S+/g;ft.Callbacks=function(t){t="string"==typeof t?o(t):ft.extend({},t);var e,n,i,r,a=[],s=[],l=-1,c=function(){for(r=t.once,i=e=!0;s.length;l=-1)for(n=s.shift();++l<a.length;)!1===a[l].apply(n[0],n[1])&&t.stopOnFalse&&(l=a.length,n=!1);t.memory||(n=!1),e=!1,r&&(a=n?[]:"")},u={add:function(){return a&&(n&&!e&&(l=a.length-1,s.push(n)),function e(n){ft.each(n,function(n,i){ft.isFunction(i)?t.unique&&u.has(i)||a.push(i):i&&i.length&&"string"!==ft.type(i)&&e(i)})}(arguments),n&&!e&&c()),this},remove:function(){return ft.each(arguments,function(t,e){for(var n;(n=ft.inArray(e,a,n))>-1;)a.splice(n,1),n<=l&&l--}),this},has:function(t){return t?ft.inArray(t,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return r=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return r=!0,n||u.disable(),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=n||[],n=[t,n.slice?n.slice():n],s.push(n),e||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},ft.extend({Deferred:function(t){var e=[["resolve","done",ft.Callbacks("once memory"),"resolved"],["reject","fail",ft.Callbacks("once memory"),"rejected"],["notify","progress",ft.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return ft.Deferred(function(n){ft.each(e,function(e,o){var a=ft.isFunction(t[e])&&t[e];r[o[1]](function(){var t=a&&a.apply(this,arguments);t&&ft.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===i?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?ft.extend(t,i):i}},r={};return i.pipe=i.then,ft.each(e,function(t,o){var a=o[2],s=o[3];i[o[1]]=a.add,s&&a.add(function(){n=s},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=a.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=rt.call(arguments),a=o.length,s=1!==a||t&&ft.isFunction(t.promise)?a:0,l=1===s?t:ft.Deferred(),c=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?rt.call(arguments):r,i===e?l.notifyWith(n,i):--s||l.resolveWith(n,i)}};if(a>1)for(e=new Array(a),n=new Array(a),i=new Array(a);r<a;r++)o[r]&&ft.isFunction(o[r].promise)?o[r].promise().progress(c(r,n,e)).done(c(r,i,o)).fail(l.reject):--s;return s||l.resolveWith(i,o),l.promise()}});var St;ft.fn.ready=function(t){return ft.ready.promise().done(t),this},ft.extend({isReady:!1,readyWait:1,holdReady:function(t){t?ft.readyWait++:ft.ready(!0)},ready:function(t){(!0===t?--ft.readyWait:ft.isReady)||(ft.isReady=!0,!0!==t&&--ft.readyWait>0||(St.resolveWith(it,[ft]),ft.fn.triggerHandler&&(ft(it).triggerHandler("ready"),ft(it).off("ready"))))}}),ft.ready.promise=function(e){if(!St)if(St=ft.Deferred(),"complete"===it.readyState||"loading"!==it.readyState&&!it.documentElement.doScroll)t.setTimeout(ft.ready);else if(it.addEventListener)it.addEventListener("DOMContentLoaded",s),t.addEventListener("load",s);else{it.attachEvent("onreadystatechange",s),t.attachEvent("onload",s);var n=!1;try{n=null==t.frameElement&&it.documentElement}catch(t){}n&&n.doScroll&&function e(){if(!ft.isReady){try{n.doScroll("left")}catch(n){return t.setTimeout(e,50)}a(),ft.ready()}}()}return St.promise(e)},ft.ready.promise();var kt;for(kt in ft(dt))break;dt.ownFirst="0"===kt,dt.inlineBlockNeedsLayout=!1,ft(function(){var t,e,n,i;(n=it.getElementsByTagName("body")[0])&&n.style&&(e=it.createElement("div"),i=it.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),void 0!==e.style.zoom&&(e.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",dt.inlineBlockNeedsLayout=t=3===e.offsetWidth,t&&(n.style.zoom=1)),n.removeChild(i))}),function(){var t=it.createElement("div");dt.deleteExpando=!0;try{delete t.test}catch(t){dt.deleteExpando=!1}t=null}();var Nt=function(t){var e=ft.noData[(t.nodeName+" ").toLowerCase()],n=+t.nodeType||1;return(1===n||9===n)&&(!e||!0!==e&&t.getAttribute("classid")===e)},$t=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,At=/([A-Z])/g;ft.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(t){return!!(t=t.nodeType?ft.cache[t[ft.expando]]:t[ft.expando])&&!c(t)},data:function(t,e,n){return u(t,e,n)},removeData:function(t,e){return d(t,e)},_data:function(t,e,n){return u(t,e,n,!0)},_removeData:function(t,e){return d(t,e,!0)}}),ft.fn.extend({data:function(t,e){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(r=ft.data(o),1===o.nodeType&&!ft._data(o,"parsedAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=ft.camelCase(i.slice(5)),l(o,i,r[i])));ft._data(o,"parsedAttrs",!0)}return r}return"object"==typeof t?this.each(function(){ft.data(this,t)}):arguments.length>1?this.each(function(){ft.data(this,t,e)}):o?l(o,t,ft.data(o,t)):void 0},removeData:function(t){return this.each(function(){ft.removeData(this,t)})}}),ft.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=ft._data(t,e),n&&(!i||ft.isArray(n)?i=ft._data(t,e,ft.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=ft.queue(t,e),i=n.length,r=n.shift(),o=ft._queueHooks(t,e),a=function(){ft.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return ft._data(t,n)||ft._data(t,n,{empty:ft.Callbacks("once memory").add(function(){ft._removeData(t,e+"queue"),ft._removeData(t,n)})})}}),ft.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?ft.queue(this[0],t):void 0===e?this:this.each(function(){var n=ft.queue(this,t,e);ft._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&ft.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ft.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=ft.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=ft._data(o[a],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(e)}}),function(){var t;dt.shrinkWrapBlocks=function(){if(null!=t)return t;t=!1;var e,n,i;return(n=it.getElementsByTagName("body")[0])&&n.style?(e=it.createElement("div"),i=it.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),void 0!==e.style.zoom&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(it.createElement("div")).style.width="5px",t=3!==e.offsetWidth),n.removeChild(i),t):void 0}}();var Dt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,jt=new RegExp("^(?:([+-])=|)("+Dt+")([a-z%]*)$","i"),Lt=["Top","Right","Bottom","Left"],Ot=function(t,e){return t=e||t,"none"===ft.css(t,"display")||!ft.contains(t.ownerDocument,t)},It=function(t,e,n,i,r,o,a){var s=0,l=t.length,c=null==n;if("object"===ft.type(n)){r=!0;for(s in n)It(t,e,s,n[s],!0,o,a)}else if(void 0!==i&&(r=!0,ft.isFunction(i)||(a=!0),c&&(a?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(ft(t),n)})),e))for(;s<l;s++)e(t[s],n,a?i:i.call(t[s],s,e(t[s],n)));return r?t:c?e.call(t):l?e(t[0],n):o},Ht=/^(?:checkbox|radio)$/i,Rt=/<([\w:-]+)/,Pt=/^$|\/(?:java|ecma)script/i,qt=/^\s+/,Ft="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";!function(){var t=it.createElement("div"),e=it.createDocumentFragment(),n=it.createElement("input");t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",dt.leadingWhitespace=3===t.firstChild.nodeType,dt.tbody=!t.getElementsByTagName("tbody").length,dt.htmlSerialize=!!t.getElementsByTagName("link").length,dt.html5Clone="<:nav></:nav>"!==it.createElement("nav").cloneNode(!0).outerHTML,n.type="checkbox",n.checked=!0,e.appendChild(n),dt.appendChecked=n.checked,t.innerHTML="<textarea>x</textarea>",dt.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,e.appendChild(t),n=it.createElement("input"),n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),dt.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,dt.noCloneEvent=!!t.addEventListener,t[ft.expando]=1,dt.attributes=!t.getAttribute(ft.expando)}();var Mt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:dt.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};Mt.optgroup=Mt.option,Mt.tbody=Mt.tfoot=Mt.colgroup=Mt.caption=Mt.thead,Mt.th=Mt.td;var _t=/<|&#?\w+;/,Bt=/<tbody/i;!function(){var e,n,i=it.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})n="on"+e,(dt[e]=n in t)||(i.setAttribute(n,"t"),dt[e]=!1===i.attributes[n].expando);i=null}();var Wt=/^(?:input|select|textarea)$/i,zt=/^key/,Ut=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Xt=/^(?:focusinfocus|focusoutblur)$/,Vt=/^([^.]*)(?:\.(.+)|)/;ft.event={global:{},add:function(t,e,n,i,r){var o,a,s,l,c,u,d,f,p,h,m,g=ft._data(t);if(g){for(n.handler&&(l=n,n=l.handler,r=l.selector),n.guid||(n.guid=ft.guid++),(a=g.events)||(a=g.events={}),(u=g.handle)||(u=g.handle=function(t){return void 0===ft||t&&ft.event.triggered===t.type?void 0:ft.event.dispatch.apply(u.elem,arguments)},u.elem=t),e=(e||"").match(Et)||[""],s=e.length;s--;)o=Vt.exec(e[s])||[],p=m=o[1],h=(o[2]||"").split(".").sort(),p&&(c=ft.event.special[p]||{},p=(r?c.delegateType:c.bindType)||p,c=ft.event.special[p]||{},d=ft.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&ft.expr.match.needsContext.test(r),namespace:h.join(".")},l),(f=a[p])||(f=a[p]=[],f.delegateCount=0,c.setup&&!1!==c.setup.call(t,i,h,u)||(t.addEventListener?t.addEventListener(p,u,!1):t.attachEvent&&t.attachEvent("on"+p,u))),c.add&&(c.add.call(t,d),d.handler.guid||(d.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,d):f.push(d),ft.event.global[p]=!0);t=null}},remove:function(t,e,n,i,r){var o,a,s,l,c,u,d,f,p,h,m,g=ft.hasData(t)&&ft._data(t);if(g&&(u=g.events)){for(e=(e||"").match(Et)||[""],c=e.length;c--;)if(s=Vt.exec(e[c])||[],p=m=s[1],h=(s[2]||"").split(".").sort(),p){for(d=ft.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,f=u[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=f.length;o--;)a=f[o],!r&&m!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||i&&i!==a.selector&&("**"!==i||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,d.remove&&d.remove.call(t,a));l&&!f.length&&(d.teardown&&!1!==d.teardown.call(t,h,g.handle)||ft.removeEvent(t,p,g.handle),delete u[p])}else for(p in u)ft.event.remove(t,p+e[c],n,i,!0);ft.isEmptyObject(u)&&(delete g.handle,ft._removeData(t,"events"))}},trigger:function(e,n,i,r){var o,a,s,l,c,u,d,f=[i||it],p=ut.call(e,"type")?e.type:e,h=ut.call(e,"namespace")?e.namespace.split("."):[];if(s=u=i=i||it,3!==i.nodeType&&8!==i.nodeType&&!Xt.test(p+ft.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),a=p.indexOf(":")<0&&"on"+p,e=e[ft.expando]?e:new ft.Event(p,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:ft.makeArray(n,[e]),c=ft.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(i,n))){if(!r&&!c.noBubble&&!ft.isWindow(i)){for(l=c.delegateType||p,Xt.test(l+p)||(s=s.parentNode);s;s=s.parentNode)f.push(s),u=s;u===(i.ownerDocument||it)&&f.push(u.defaultView||u.parentWindow||t)}for(d=0;(s=f[d++])&&!e.isPropagationStopped();)e.type=d>1?l:c.bindType||p,o=(ft._data(s,"events")||{})[e.type]&&ft._data(s,"handle"),o&&o.apply(s,n),(o=a&&s[a])&&o.apply&&Nt(s)&&(e.result=o.apply(s,n),!1===e.result&&e.preventDefault());if(e.type=p,!r&&!e.isDefaultPrevented()&&(!c._default||!1===c._default.apply(f.pop(),n))&&Nt(i)&&a&&i[p]&&!ft.isWindow(i)){u=i[a],u&&(i[a]=null),ft.event.triggered=p;try{i[p]()}catch(t){}ft.event.triggered=void 0,u&&(i[a]=u)}return e.result}},dispatch:function(t){t=ft.event.fix(t);var e,n,i,r,o,a=[],s=rt.call(arguments),l=(ft._data(this,"events")||{})[t.type]||[],c=ft.event.special[t.type]||{};if(s[0]=t,t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){for(a=ft.event.handlers.call(this,t,l),e=0;(r=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(o.namespace)||(t.handleObj=o,t.data=o.data,void 0!==(i=((ft.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,o,a=[],s=e.delegateCount,l=t.target;if(s&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==t.type)){for(i=[],n=0;n<s;n++)o=e[n],r=o.selector+" ",void 0===i[r]&&(i[r]=o.needsContext?ft(r,this).index(l)>-1:ft.find(r,this,null,[l]).length),i[r]&&i.push(o);i.length&&a.push({elem:l,handlers:i})}return s<e.length&&a.push({elem:this,handlers:e.slice(s)}),a},fix:function(t){if(t[ft.expando])return t;var e,n,i,r=t.type,o=t,a=this.fixHooks[r];for(a||(this.fixHooks[r]=a=Ut.test(r)?this.mouseHooks:zt.test(r)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,t=new ft.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=o.srcElement||it),3===t.target.nodeType&&(t.target=t.target.parentNode),t.metaKey=!!t.metaKey,a.filter?a.filter(t,o):t},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,o=e.button,a=e.fromElement;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||it,r=i.documentElement,n=i.body,t.pageX=e.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0),t.pageY=e.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)),!t.relatedTarget&&a&&(t.relatedTarget=a===t.target?e.toElement:a),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==x()&&this.focus)try{return this.focus(),!1}catch(t){}},delegateType:"focusin"},blur:{trigger:function(){if(this===x()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(ft.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(t){return ft.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n){var i=ft.extend(new ft.Event,n,{type:t,isSimulated:!0});ft.event.trigger(i,null,e),i.isDefaultPrevented()&&n.preventDefault()}},ft.removeEvent=it.removeEventListener?function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)}:function(t,e,n){var i="on"+e;t.detachEvent&&(void 0===t[i]&&(t[i]=null),t.detachEvent(i,n))},ft.Event=function(t,e){if(!(this instanceof ft.Event))return new ft.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?y:b):this.type=t,e&&ft.extend(this,e),this.timeStamp=t&&t.timeStamp||ft.now(),this[ft.expando]=!0},ft.Event.prototype={constructor:ft.Event,isDefaultPrevented:b,isPropagationStopped:b,isImmediatePropagationStopped:b,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=y,t&&(t.preventDefault?t.preventDefault():t.returnValue=!1)},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=y,t&&!this.isSimulated&&(t.stopPropagation&&t.stopPropagation(),t.cancelBubble=!0)},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=y,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},ft.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){ft.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return r&&(r===i||ft.contains(i,r))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),dt.submit||(ft.event.special.submit={setup:function(){if(ft.nodeName(this,"form"))return!1;ft.event.add(this,"click._submit keypress._submit",function(t){var e=t.target,n=ft.nodeName(e,"input")||ft.nodeName(e,"button")?ft.prop(e,"form"):void 0;n&&!ft._data(n,"submit")&&(ft.event.add(n,"submit._submit",function(t){t._submitBubble=!0}),ft._data(n,"submit",!0))})},postDispatch:function(t){t._submitBubble&&(delete t._submitBubble,this.parentNode&&!t.isTrigger&&ft.event.simulate("submit",this.parentNode,t))},teardown:function(){if(ft.nodeName(this,"form"))return!1;ft.event.remove(this,"._submit")}}),dt.change||(ft.event.special.change={setup:function(){if(Wt.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(ft.event.add(this,"propertychange._change",function(t){"checked"===t.originalEvent.propertyName&&(this._justChanged=!0)}),ft.event.add(this,"click._change",function(t){this._justChanged&&!t.isTrigger&&(this._justChanged=!1),ft.event.simulate("change",this,t)})),!1;ft.event.add(this,"beforeactivate._change",function(t){var e=t.target;Wt.test(e.nodeName)&&!ft._data(e,"change")&&(ft.event.add(e,"change._change",function(t){!this.parentNode||t.isSimulated||t.isTrigger||ft.event.simulate("change",this.parentNode,t)}),ft._data(e,"change",!0))})},handle:function(t){var e=t.target;if(this!==e||t.isSimulated||t.isTrigger||"radio"!==e.type&&"checkbox"!==e.type)return t.handleObj.handler.apply(this,arguments)},teardown:function(){return ft.event.remove(this,"._change"),!Wt.test(this.nodeName)}}),dt.focusin||ft.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){ft.event.simulate(e,t.target,ft.event.fix(t))};ft.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=ft._data(i,e);r||i.addEventListener(t,n,!0),ft._data(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=ft._data(i,e)-1;r?ft._data(i,e,r):(i.removeEventListener(t,n,!0),ft._removeData(i,e))}}}),ft.fn.extend({on:function(t,e,n,i){return w(this,t,e,n,i)},one:function(t,e,n,i){return w(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,ft(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=b),this.each(function(){
ft.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){ft.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return ft.event.trigger(t,e,n,!0)}});var Qt=new RegExp("<(?:"+Ft+")[\\s/>]","i"),Jt=/<script|<style|<link/i,Gt=/checked\s*(?:[^=]|=\s*.checked.)/i,Yt=/^true\/(.*)/,Kt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Zt=p(it),te=Zt.appendChild(it.createElement("div"));ft.extend({htmlPrefilter:function(t){return t.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,"<$1></$2>")},clone:function(t,e,n){var i,r,o,a,s,l=ft.contains(t.ownerDocument,t);if(dt.html5Clone||ft.isXMLDoc(t)||!Qt.test("<"+t.nodeName+">")?o=t.cloneNode(!0):(te.innerHTML=t.outerHTML,te.removeChild(o=te.firstChild)),!(dt.noCloneEvent&&dt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ft.isXMLDoc(t)))for(i=h(o),s=h(t),a=0;null!=(r=s[a]);++a)i[a]&&k(r,i[a]);if(e)if(n)for(s=s||h(t),i=i||h(o),a=0;null!=(r=s[a]);a++)S(r,i[a]);else S(t,o);return i=h(o,"script"),i.length>0&&m(i,!l&&h(t,"script")),i=s=r=null,o},cleanData:function(t,e){for(var n,i,r,o,a=0,s=ft.expando,l=ft.cache,c=dt.attributes,u=ft.event.special;null!=(n=t[a]);a++)if((e||Nt(n))&&(r=n[s],o=r&&l[r])){if(o.events)for(i in o.events)u[i]?ft.event.remove(n,i):ft.removeEvent(n,i,o.handle);l[r]&&(delete l[r],c||void 0===n.removeAttribute?n[s]=void 0:n.removeAttribute(s),nt.push(r))}}}),ft.fn.extend({domManip:N,detach:function(t){return $(this,t,!0)},remove:function(t){return $(this,t)},text:function(t){return It(this,function(t){return void 0===t?ft.text(this):this.empty().append((this[0]&&this[0].ownerDocument||it).createTextNode(t))},null,t,arguments.length)},append:function(){return N(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){T(this,t).appendChild(t)}})},prepend:function(){return N(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=T(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return N(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return N(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++){for(1===t.nodeType&&ft.cleanData(h(t,!1));t.firstChild;)t.removeChild(t.firstChild);t.options&&ft.nodeName(t,"select")&&(t.options.length=0)}return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return ft.clone(this,t,e)})},html:function(t){return It(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t)return 1===e.nodeType?e.innerHTML.replace(/ jQuery\d+="(?:null|\d+)"/g,""):void 0;if("string"==typeof t&&!Jt.test(t)&&(dt.htmlSerialize||!Qt.test(t))&&(dt.leadingWhitespace||!qt.test(t))&&!Mt[(Rt.exec(t)||["",""])[1].toLowerCase()]){t=ft.htmlPrefilter(t);try{for(;n<i;n++)e=this[n]||{},1===e.nodeType&&(ft.cleanData(h(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return N(this,arguments,function(e){var n=this.parentNode;ft.inArray(this,t)<0&&(ft.cleanData(h(this)),n&&n.replaceChild(e,this))},t)}}),ft.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ft.fn[t]=function(t){for(var n,i=0,r=[],o=ft(t),a=o.length-1;i<=a;i++)n=i===a?this:this.clone(!0),ft(o[i])[e](n),at.apply(r,n.get());return this.pushStack(r)}});var ee,ne={HTML:"block",BODY:"block"},ie=/^margin/,re=new RegExp("^("+Dt+")(?!px)[a-z%]+$","i"),oe=function(t,e,n,i){var r,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=a[o];return r},ae=it.documentElement;!function(){function e(){var e,u,d=it.documentElement;d.appendChild(l),c.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",n=r=s=!1,i=a=!0,t.getComputedStyle&&(u=t.getComputedStyle(c),n="1%"!==(u||{}).top,s="2px"===(u||{}).marginLeft,r="4px"===(u||{width:"4px"}).width,c.style.marginRight="50%",i="4px"===(u||{marginRight:"4px"}).marginRight,e=c.appendChild(it.createElement("div")),e.style.cssText=c.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",e.style.marginRight=e.style.width="0",c.style.width="1px",a=!parseFloat((t.getComputedStyle(e)||{}).marginRight),c.removeChild(e)),c.style.display="none",o=0===c.getClientRects().length,o&&(c.style.display="",c.innerHTML="<table><tr><td></td><td>t</td></tr></table>",c.childNodes[0].style.borderCollapse="separate",e=c.getElementsByTagName("td"),e[0].style.cssText="margin:0;border:0;padding:0;display:none",(o=0===e[0].offsetHeight)&&(e[0].style.display="",e[1].style.display="none",o=0===e[0].offsetHeight)),d.removeChild(l)}var n,i,r,o,a,s,l=it.createElement("div"),c=it.createElement("div");c.style&&(c.style.cssText="float:left;opacity:.5",dt.opacity="0.5"===c.style.opacity,dt.cssFloat=!!c.style.cssFloat,c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",dt.clearCloneStyle="content-box"===c.style.backgroundClip,l=it.createElement("div"),l.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",c.innerHTML="",l.appendChild(c),dt.boxSizing=""===c.style.boxSizing||""===c.style.MozBoxSizing||""===c.style.WebkitBoxSizing,ft.extend(dt,{reliableHiddenOffsets:function(){return null==n&&e(),o},boxSizingReliable:function(){return null==n&&e(),r},pixelMarginRight:function(){return null==n&&e(),i},pixelPosition:function(){return null==n&&e(),n},reliableMarginRight:function(){return null==n&&e(),a},reliableMarginLeft:function(){return null==n&&e(),s}}))}();var se,le,ce=/^(top|right|bottom|left)$/;t.getComputedStyle?(se=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},le=function(t,e,n){var i,r,o,a,s=t.style;return n=n||se(t),a=n?n.getPropertyValue(e)||n[e]:void 0,""!==a&&void 0!==a||ft.contains(t.ownerDocument,t)||(a=ft.style(t,e)),n&&!dt.pixelMarginRight()&&re.test(a)&&ie.test(e)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o),void 0===a?a:a+""}):ae.currentStyle&&(se=function(t){return t.currentStyle},le=function(t,e,n){var i,r,o,a,s=t.style;return n=n||se(t),a=n?n[e]:void 0,null==a&&s&&s[e]&&(a=s[e]),re.test(a)&&!ce.test(e)&&(i=s.left,r=t.runtimeStyle,o=r&&r.left,o&&(r.left=t.currentStyle.left),s.left="fontSize"===e?"1em":a,a=s.pixelLeft+"px",s.left=i,o&&(r.left=o)),void 0===a?a:a+""||"auto"});var ue=/alpha\([^)]*\)/i,de=/opacity\s*=\s*([^)]*)/i,fe=/^(none|table(?!-c[ea]).+)/,pe=new RegExp("^("+Dt+")(.*)$","i"),he={position:"absolute",visibility:"hidden",display:"block"},me={letterSpacing:"0",fontWeight:"400"},ge=["Webkit","O","Moz","ms"],ve=it.createElement("div").style;ft.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=le(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:dt.cssFloat?"cssFloat":"styleFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,a,s=ft.camelCase(e),l=t.style;if(e=ft.cssProps[s]||(ft.cssProps[s]=L(s)||s),a=ft.cssHooks[e]||ft.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(t,!1,i))?r:l[e];if(o=typeof n,"string"===o&&(r=jt.exec(n))&&r[1]&&(n=f(t,e,r),o="number"),null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(ft.cssNumber[s]?"":"px")),dt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),!(a&&"set"in a&&void 0===(n=a.set(t,n,i)))))try{l[e]=n}catch(t){}}},css:function(t,e,n,i){var r,o,a,s=ft.camelCase(e);return e=ft.cssProps[s]||(ft.cssProps[s]=L(s)||s),a=ft.cssHooks[e]||ft.cssHooks[s],a&&"get"in a&&(o=a.get(t,!0,n)),void 0===o&&(o=le(t,e,i)),"normal"===o&&e in me&&(o=me[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),ft.each(["height","width"],function(t,e){ft.cssHooks[e]={get:function(t,n,i){if(n)return fe.test(ft.css(t,"display"))&&0===t.offsetWidth?oe(t,he,function(){return R(t,e,i)}):R(t,e,i)},set:function(t,n,i){var r=i&&se(t);return I(t,n,i?H(t,e,i,dt.boxSizing&&"border-box"===ft.css(t,"boxSizing",!1,r),r):0)}}}),dt.opacity||(ft.cssHooks.opacity={get:function(t,e){return de.test((e&&t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":e?"1":""},set:function(t,e){var n=t.style,i=t.currentStyle,r=ft.isNumeric(e)?"alpha(opacity="+100*e+")":"",o=i&&i.filter||n.filter||"";n.zoom=1,(e>=1||""===e)&&""===ft.trim(o.replace(ue,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===e||i&&!i.filter)||(n.filter=ue.test(o)?o.replace(ue,r):o+" "+r)}}),ft.cssHooks.marginRight=j(dt.reliableMarginRight,function(t,e){if(e)return oe(t,{display:"inline-block"},le,[t,"marginRight"])}),ft.cssHooks.marginLeft=j(dt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(le(t,"marginLeft"))||(ft.contains(t.ownerDocument,t)?t.getBoundingClientRect().left-oe(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}):0))+"px"}),ft.each({margin:"",padding:"",border:"Width"},function(t,e){ft.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+Lt[i]+e]=o[i]||o[i-2]||o[0];return r}},ie.test(t)||(ft.cssHooks[t+e].set=I)}),ft.fn.extend({css:function(t,e){return It(this,function(t,e,n){var i,r,o={},a=0;if(ft.isArray(e)){for(i=se(t),r=e.length;a<r;a++)o[e[a]]=ft.css(t,e[a],!1,i);return o}return void 0!==n?ft.style(t,e,n):ft.css(t,e)},t,e,arguments.length>1)},show:function(){return O(this,!0)},hide:function(){return O(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Ot(this)?ft(this).show():ft(this).hide()})}}),ft.Tween=P,P.prototype={constructor:P,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||ft.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(ft.cssNumber[n]?"":"px")},cur:function(){var t=P.propHooks[this.prop];return t&&t.get?t.get(this):P.propHooks._default.get(this)},run:function(t){var e,n=P.propHooks[this.prop];return this.options.duration?this.pos=e=ft.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):P.propHooks._default.set(this),this}},P.prototype.init.prototype=P.prototype,P.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=ft.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){ft.fx.step[t.prop]?ft.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[ft.cssProps[t.prop]]&&!ft.cssHooks[t.prop]?t.elem[t.prop]=t.now:ft.style(t.elem,t.prop,t.now+t.unit)}}},P.propHooks.scrollTop=P.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ft.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},ft.fx=P.prototype.init,ft.fx.step={};var ye,be,xe=/^(?:toggle|show|hide)$/,we=/queueHooks$/;ft.Animation=ft.extend(W,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return f(n.elem,t,jt.exec(e),n),n}]},tweener:function(t,e){ft.isFunction(t)?(e=t,t=["*"]):t=t.match(Et);for(var n,i=0,r=t.length;i<r;i++)n=t[i],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(e)},prefilters:[_],prefilter:function(t,e){e?W.prefilters.unshift(t):W.prefilters.push(t)}}),ft.speed=function(t,e,n){var i=t&&"object"==typeof t?ft.extend({},t):{complete:n||!n&&e||ft.isFunction(t)&&t,duration:t,easing:n&&e||e&&!ft.isFunction(e)&&e};return i.duration=ft.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in ft.fx.speeds?ft.fx.speeds[i.duration]:ft.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){ft.isFunction(i.old)&&i.old.call(this),i.queue&&ft.dequeue(this,i.queue)},i},ft.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Ot).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=ft.isEmptyObject(t),o=ft.speed(e,n,i),a=function(){var e=W(this,ft.extend({},t),o);(r||ft._data(this,"finish"))&&e.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=ft.timers,a=ft._data(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&we.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||ft.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=ft._data(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=ft.timers,a=i?i.length:0;for(n.finish=!0,ft.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),ft.each(["toggle","show","hide"],function(t,e){var n=ft.fn[e];ft.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(F(e,!0),t,i,r)}}),ft.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ft.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),ft.timers=[],ft.fx.tick=function(){var t,e=ft.timers,n=0;for(ye=ft.now();n<e.length;n++)(t=e[n])()||e[n]!==t||e.splice(n--,1);e.length||ft.fx.stop(),ye=void 0},ft.fx.timer=function(t){ft.timers.push(t),t()?ft.fx.start():ft.timers.pop()},ft.fx.interval=13,ft.fx.start=function(){be||(be=t.setInterval(ft.fx.tick,ft.fx.interval))},ft.fx.stop=function(){t.clearInterval(be),be=null},ft.fx.speeds={slow:600,fast:200,_default:400},ft.fn.delay=function(e,n){return e=ft.fx?ft.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var r=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(r)}})},function(){var t,e=it.createElement("input"),n=it.createElement("div"),i=it.createElement("select"),r=i.appendChild(it.createElement("option"));n=it.createElement("div"),n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",t=n.getElementsByTagName("a")[0],e.setAttribute("type","checkbox"),n.appendChild(e),t=n.getElementsByTagName("a")[0],t.style.cssText="top:1px",dt.getSetAttribute="t"!==n.className,dt.style=/top/.test(t.getAttribute("style")),dt.hrefNormalized="/a"===t.getAttribute("href"),dt.checkOn=!!e.value,dt.optSelected=r.selected,dt.enctype=!!it.createElement("form").enctype,i.disabled=!0,dt.optDisabled=!r.disabled,e=it.createElement("input"),e.setAttribute("value",""),dt.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),dt.radioValue="t"===e.value}();ft.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=ft.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,ft(this).val()):t,null==r?r="":"number"==typeof r?r+="":ft.isArray(r)&&(r=ft.map(r,function(t){return null==t?"":t+""})),(e=ft.valHooks[this.type]||ft.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return(e=ft.valHooks[r.type]||ft.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(/\r/g,""):null==n?"":n)}}}),ft.extend({valHooks:{option:{get:function(t){var e=ft.find.attr(t,"value");return null!=e?e:ft.trim(ft.text(t)).replace(/[\x20\t\r\n\f]+/g," ")}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||r<0,a=o?null:[],s=o?r+1:i.length,l=r<0?s:o?r:0;l<s;l++)if(n=i[l],(n.selected||l===r)&&(dt.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ft.nodeName(n.parentNode,"optgroup"))){if(e=ft(n).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var n,i,r=t.options,o=ft.makeArray(e),a=r.length;a--;)if(i=r[a],ft.inArray(ft.valHooks.option.get(i),o)>-1)try{i.selected=n=!0}catch(t){i.scrollHeight}else i.selected=!1;return n||(t.selectedIndex=-1),r}}}}),ft.each(["radio","checkbox"],function(){ft.valHooks[this]={set:function(t,e){if(ft.isArray(e))return t.checked=ft.inArray(ft(t).val(),e)>-1}},dt.checkOn||(ft.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Te,Ce,Ee=ft.expr.attrHandle,Se=/^(?:checked|selected)$/i,ke=dt.getSetAttribute,Ne=dt.input;ft.fn.extend({attr:function(t,e){return It(this,ft.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ft.removeAttr(this,t)})}}),ft.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?ft.prop(t,e,n):(1===o&&ft.isXMLDoc(t)||(e=e.toLowerCase(),r=ft.attrHooks[e]||(ft.expr.match.bool.test(e)?Ce:Te)),void 0!==n?null===n?void ft.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:(i=ft.find.attr(t,e),null==i?void 0:i))},attrHooks:{type:{set:function(t,e){if(!dt.radioValue&&"radio"===e&&ft.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(Et);if(o&&1===t.nodeType)for(;n=o[r++];)i=ft.propFix[n]||n,ft.expr.match.bool.test(n)?Ne&&ke||!Se.test(n)?t[i]=!1:t[ft.camelCase("default-"+n)]=t[i]=!1:ft.attr(t,n,""),t.removeAttribute(ke?n:i)}}),Ce={set:function(t,e,n){return!1===e?ft.removeAttr(t,n):Ne&&ke||!Se.test(n)?t.setAttribute(!ke&&ft.propFix[n]||n,n):t[ft.camelCase("default-"+n)]=t[n]=!0,n}},ft.each(ft.expr.match.bool.source.match(/\w+/g),function(t,e){var n=Ee[e]||ft.find.attr;Ne&&ke||!Se.test(e)?Ee[e]=function(t,e,i){var r,o;return i||(o=Ee[e],Ee[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,Ee[e]=o),r}:Ee[e]=function(t,e,n){if(!n)return t[ft.camelCase("default-"+e)]?e.toLowerCase():null}}),Ne&&ke||(ft.attrHooks.value={set:function(t,e,n){if(!ft.nodeName(t,"input"))return Te&&Te.set(t,e,n);t.defaultValue=e}}),ke||(Te={set:function(t,e,n){var i=t.getAttributeNode(n);if(i||t.setAttributeNode(i=t.ownerDocument.createAttribute(n)),i.value=e+="","value"===n||e===t.getAttribute(n))return e}},Ee.id=Ee.name=Ee.coords=function(t,e,n){var i;if(!n)return(i=t.getAttributeNode(e))&&""!==i.value?i.value:null},ft.valHooks.button={get:function(t,e){var n=t.getAttributeNode(e);if(n&&n.specified)return n.value},set:Te.set},ft.attrHooks.contenteditable={set:function(t,e,n){Te.set(t,""!==e&&e,n)}},ft.each(["width","height"],function(t,e){ft.attrHooks[e]={set:function(t,n){if(""===n)return t.setAttribute(e,"auto"),n}}})),dt.style||(ft.attrHooks.style={get:function(t){return t.style.cssText||void 0},set:function(t,e){return t.style.cssText=e+""}});var $e=/^(?:input|select|textarea|button|object)$/i,Ae=/^(?:a|area)$/i;ft.fn.extend({prop:function(t,e){return It(this,ft.prop,t,e,arguments.length>1)},removeProp:function(t){return t=ft.propFix[t]||t,this.each(function(){try{this[t]=void 0,delete this[t]}catch(t){}})}}),ft.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ft.isXMLDoc(t)||(e=ft.propFix[e]||e,r=ft.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=ft.find.attr(t,"tabindex");return e?parseInt(e,10):$e.test(t.nodeName)||Ae.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),dt.hrefNormalized||ft.each(["href","src"],function(t,e){ft.propHooks[e]={get:function(t){return t.getAttribute(e,4)}}}),dt.optSelected||(ft.propHooks.selected={get:function(t){var e=t.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),ft.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ft.propFix[this.toLowerCase()]=this}),dt.enctype||(ft.propFix.enctype="encoding");ft.fn.extend({addClass:function(t){var e,n,i,r,o,a,s,l=0;if(ft.isFunction(t))return this.each(function(e){ft(this).addClass(t.call(this,e,z(this)))});if("string"==typeof t&&t)for(e=t.match(Et)||[];n=this[l++];)if(r=z(n),i=1===n.nodeType&&(" "+r+" ").replace(/[\t\r\n\f]/g," ")){for(a=0;o=e[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");s=ft.trim(i),r!==s&&ft.attr(n,"class",s)}return this},removeClass:function(t){var e,n,i,r,o,a,s,l=0;if(ft.isFunction(t))return this.each(function(e){ft(this).removeClass(t.call(this,e,z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(Et)||[];n=this[l++];)if(r=z(n),i=1===n.nodeType&&(" "+r+" ").replace(/[\t\r\n\f]/g," ")){for(a=0;o=e[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");s=ft.trim(i),r!==s&&ft.attr(n,"class",s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):ft.isFunction(t)?this.each(function(n){ft(this).toggleClass(t.call(this,n,z(this),e),e)}):this.each(function(){var e,i,r,o;if("string"===n)for(i=0,r=ft(this),o=t.match(Et)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==n||(e=z(this),e&&ft._data(this,"__className__",e),ft.attr(this,"class",e||!1===t?"":ft._data(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+z(n)+" ").replace(/[\t\r\n\f]/g," ").indexOf(e)>-1)return!0;return!1}}),ft.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){ft.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),ft.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}});var De=t.location,je=ft.now(),Le=/\?/;ft.parseJSON=function(e){if(t.JSON&&t.JSON.parse)return t.JSON.parse(e+"");var n,i=null,r=ft.trim(e+"");return r&&!ft.trim(r.replace(/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g,function(t,e,r,o){return n&&e&&(i=0),0===i?t:(n=r||e,i+=!o-!r,"")}))?Function("return "+r)():ft.error("Invalid JSON: "+e)},ft.parseXML=function(e){var n,i;if(!e||"string"!=typeof e)return null;try{t.DOMParser?(i=new t.DOMParser,n=i.parseFromString(e,"text/xml")):(n=new t.ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(e))}catch(t){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||ft.error("Invalid XML: "+e),n};var Oe=/([?&])_=[^&]*/,Ie=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,He=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Re=/^(?:GET|HEAD)$/,Pe=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,qe={},Fe={},Me="*/".concat("*"),_e=De.href,Be=Pe.exec(_e.toLowerCase())||[];ft.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_e,type:"GET",isLocal:He.test(Be[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Me,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ft.parseJSON,"text xml":ft.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?V(V(t,ft.ajaxSettings),e):V(ft.ajaxSettings,t)},ajaxPrefilter:U(qe),ajaxTransport:U(Fe),ajax:function(e,n){function i(e,n,i,r){var o,d,y,b,w,C=n;2!==x&&(x=2,l&&t.clearTimeout(l),u=void 0,s=r||"",T.readyState=e>0?4:0,o=e>=200&&e<300||304===e,i&&(b=Q(f,T,i)),b=J(f,b,T,o),o?(f.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(ft.lastModified[a]=w),(w=T.getResponseHeader("etag"))&&(ft.etag[a]=w)),204===e||"HEAD"===f.type?C="nocontent":304===e?C="notmodified":(C=b.state,d=b.data,y=b.error,o=!y)):(y=C,!e&&C||(C="error",e<0&&(e=0))),T.status=e,T.statusText=(n||C)+"",o?m.resolveWith(p,[d,C,T]):m.rejectWith(p,[T,C,y]),T.statusCode(v),v=void 0,c&&h.trigger(o?"ajaxSuccess":"ajaxError",[T,f,o?d:y]),g.fireWith(p,[T,C]),c&&(h.trigger("ajaxComplete",[T,f]),--ft.active||ft.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,o,a,s,l,c,u,d,f=ft.ajaxSetup({},n),p=f.context||f,h=f.context&&(p.nodeType||p.jquery)?ft(p):ft.event,m=ft.Deferred(),g=ft.Callbacks("once memory"),v=f.statusCode||{},y={},b={},x=0,w="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(2===x){if(!d)for(d={};e=Ie.exec(s);)d[e[1].toLowerCase()]=e[2];e=d[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return x||(t=b[n]=b[n]||t,y[t]=e),this},overrideMimeType:function(t){return x||(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(x<2)for(e in t)v[e]=[v[e],t[e]];else T.always(t[T.status]);return this},abort:function(t){var e=t||w;return u&&u.abort(e),i(0,e),this}};if(m.promise(T).complete=g.add,T.success=T.done,T.error=T.fail,f.url=((e||f.url||_e)+"").replace(/#.*$/,"").replace(/^\/\//,Be[1]+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=ft.trim(f.dataType||"*").toLowerCase().match(Et)||[""],null==f.crossDomain&&(r=Pe.exec(f.url.toLowerCase()),f.crossDomain=!(!r||r[1]===Be[1]&&r[2]===Be[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(Be[3]||("http:"===Be[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=ft.param(f.data,f.traditional)),X(qe,f,n,T),2===x)return T;c=ft.event&&f.global,c&&0==ft.active++&&ft.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Re.test(f.type),a=f.url,f.hasContent||(f.data&&(a=f.url+=(Le.test(a)?"&":"?")+f.data,delete f.data),!1===f.cache&&(f.url=Oe.test(a)?a.replace(Oe,"$1_="+je++):a+(Le.test(a)?"&":"?")+"_="+je++)),f.ifModified&&(ft.lastModified[a]&&T.setRequestHeader("If-Modified-Since",ft.lastModified[a]),ft.etag[a]&&T.setRequestHeader("If-None-Match",ft.etag[a])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Me+"; q=0.01":""):f.accepts["*"]);for(o in f.headers)T.setRequestHeader(o,f.headers[o]);if(f.beforeSend&&(!1===f.beforeSend.call(p,T,f)||2===x))return T.abort();w="abort";for(o in{success:1,error:1,complete:1})T[o](f[o]);if(u=X(Fe,f,n,T)){if(T.readyState=1,c&&h.trigger("ajaxSend",[T,f]),2===x)return T;f.async&&f.timeout>0&&(l=t.setTimeout(function(){T.abort("timeout")},f.timeout));try{x=1,u.send(y,i)}catch(t){if(!(x<2))throw t;i(-1,t)}}else i(-1,"No Transport");return T},getJSON:function(t,e,n){return ft.get(t,e,n,"json")},getScript:function(t,e){return ft.get(t,void 0,e,"script")}}),ft.each(["get","post"],function(t,e){ft[e]=function(t,n,i,r){return ft.isFunction(n)&&(r=r||i,i=n,n=void 0),ft.ajax(ft.extend({url:t,type:e,dataType:r,data:n,success:i},ft.isPlainObject(t)&&t))}}),ft._evalUrl=function(t){return ft.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},ft.fn.extend({wrapAll:function(t){if(ft.isFunction(t))return this.each(function(e){ft(this).wrapAll(t.call(this,e))});if(this[0]){var e=ft(t,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstChild&&1===t.firstChild.nodeType;)t=t.firstChild;return t}).append(this)}return this},wrapInner:function(t){return ft.isFunction(t)?this.each(function(e){ft(this).wrapInner(t.call(this,e))}):this.each(function(){var e=ft(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=ft.isFunction(t);return this.each(function(n){ft(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){ft.nodeName(this,"body")||ft(this).replaceWith(this.childNodes)}).end()}}),ft.expr.filters.hidden=function(t){return dt.reliableHiddenOffsets()?t.offsetWidth<=0&&t.offsetHeight<=0&&!t.getClientRects().length:Y(t)},ft.expr.filters.visible=function(t){return!ft.expr.filters.hidden(t)};var We=/\[\]$/,ze=/^(?:submit|button|image|reset|file)$/i,Ue=/^(?:input|select|textarea|keygen)/i;ft.param=function(t,e){var n,i=[],r=function(t,e){e=ft.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=ft.ajaxSettings&&ft.ajaxSettings.traditional),ft.isArray(t)||t.jquery&&!ft.isPlainObject(t))ft.each(t,function(){r(this.name,this.value)});else for(n in t)K(n,t[n],e,r);return i.join("&").replace(/%20/g,"+")},ft.fn.extend({serialize:function(){return ft.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=ft.prop(this,"elements");return t?ft.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!ft(this).is(":disabled")&&Ue.test(this.nodeName)&&!ze.test(t)&&(this.checked||!Ht.test(t))}).map(function(t,e){var n=ft(this).val();return null==n?null:ft.isArray(n)?ft.map(n,function(t){return{name:e.name,value:t.replace(/\r?\n/g,"\r\n")}}):{name:e.name,value:n.replace(/\r?\n/g,"\r\n")}}).get()}}),ft.ajaxSettings.xhr=void 0!==t.ActiveXObject?function(){return this.isLocal?tt():it.documentMode>8?Z():/^(get|post|head|put|delete|options)$/i.test(this.type)&&Z()||tt()}:Z;var Xe=0,Ve={},Qe=ft.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Ve)Ve[t](void 0,!0)}),dt.cors=!!Qe&&"withCredentials"in Qe,Qe=dt.ajax=!!Qe,Qe&&ft.ajaxTransport(function(e){if(!e.crossDomain||dt.cors){var n;return{send:function(i,r){var o,a=e.xhr(),s=++Xe;if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)a[o]=e.xhrFields[o];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(o in i)void 0!==i[o]&&a.setRequestHeader(o,i[o]+"");a.send(e.hasContent&&e.data||null),n=function(t,i){var o,l,c;if(n&&(i||4===a.readyState))if(delete Ve[s],n=void 0,a.onreadystatechange=ft.noop,i)4!==a.readyState&&a.abort();else{c={},o=a.status,"string"==typeof a.responseText&&(c.text=a.responseText);try{l=a.statusText}catch(t){l=""}o||!e.isLocal||e.crossDomain?1223===o&&(o=204):o=c.text?200:404}c&&r(o,l,c,a.getAllResponseHeaders())},e.async?4===a.readyState?t.setTimeout(n):a.onreadystatechange=Ve[s]=n:n()},abort:function(){n&&n(void 0,!0)}}}}),ft.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return ft.globalEval(t),t}}}),ft.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET",t.global=!1)}),ft.ajaxTransport("script",function(t){if(t.crossDomain){var e,n=it.head||ft("head")[0]||it.documentElement;return{send:function(i,r){e=it.createElement("script"),e.async=!0,t.scriptCharset&&(e.charset=t.scriptCharset),e.src=t.url,e.onload=e.onreadystatechange=function(t,n){(n||!e.readyState||/loaded|complete/.test(e.readyState))&&(e.onload=e.onreadystatechange=null,e.parentNode&&e.parentNode.removeChild(e),e=null,n||r(200,"success"))},n.insertBefore(e,n.firstChild)},abort:function(){e&&e.onload(void 0,!0)}}}});var Je=[],Ge=/(=)\?(?=&|$)|\?\?/
;ft.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Je.pop()||ft.expando+"_"+je++;return this[t]=!0,t}}),ft.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,a,s=!1!==e.jsonp&&(Ge.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ge.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=ft.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Ge,"$1"+r):!1!==e.jsonp&&(e.url+=(Le.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return a||ft.error(r+" was not called"),a[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){a=arguments},i.always(function(){void 0===o?ft(t).removeProp(r):t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,Je.push(r)),a&&ft.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),ft.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||it;var i=yt.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=v([t],e,r),r&&r.length&&ft(r).remove(),ft.merge([],i.childNodes))};var Ye=ft.fn.load;ft.fn.load=function(t,e,n){if("string"!=typeof t&&Ye)return Ye.apply(this,arguments);var i,r,o,a=this,s=t.indexOf(" ");return s>-1&&(i=ft.trim(t.slice(s,t.length)),t=t.slice(0,s)),ft.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),a.length>0&&ft.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,a.html(i?ft("<div>").append(ft.parseHTML(t)).find(i):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},ft.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ft.fn[e]=function(t){return this.on(e,t)}}),ft.expr.filters.animated=function(t){return ft.grep(ft.timers,function(e){return t===e.elem}).length},ft.offset={setOffset:function(t,e,n){var i,r,o,a,s,l,c,u=ft.css(t,"position"),d=ft(t),f={};"static"===u&&(t.style.position="relative"),s=d.offset(),o=ft.css(t,"top"),l=ft.css(t,"left"),c=("absolute"===u||"fixed"===u)&&ft.inArray("auto",[o,l])>-1,c?(i=d.position(),a=i.top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),ft.isFunction(e)&&(e=e.call(t,n,ft.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+r),"using"in e?e.using.call(t,f):d.css(f)}},ft.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ft.offset.setOffset(this,t,e)});var e,n,i={top:0,left:0},r=this[0],o=r&&r.ownerDocument;if(o)return e=o.documentElement,ft.contains(e,r)?(void 0!==r.getBoundingClientRect&&(i=r.getBoundingClientRect()),n=et(o),{top:i.top+(n.pageYOffset||e.scrollTop)-(e.clientTop||0),left:i.left+(n.pageXOffset||e.scrollLeft)-(e.clientLeft||0)}):i},position:function(){if(this[0]){var t,e,n={top:0,left:0},i=this[0];return"fixed"===ft.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),ft.nodeName(t[0],"html")||(n=t.offset()),n.top+=ft.css(t[0],"borderTopWidth",!0),n.left+=ft.css(t[0],"borderLeftWidth",!0)),{top:e.top-n.top-ft.css(i,"marginTop",!0),left:e.left-n.left-ft.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&!ft.nodeName(t,"html")&&"static"===ft.css(t,"position");)t=t.offsetParent;return t||ae})}}),ft.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n=/Y/.test(e);ft.fn[t]=function(i){return It(this,function(t,i,r){var o=et(t);if(void 0===r)return o?e in o?o[e]:o.document.documentElement[i]:t[i];o?o.scrollTo(n?ft(o).scrollLeft():r,n?r:ft(o).scrollTop()):t[i]=r},t,i,arguments.length,null)}}),ft.each(["top","left"],function(t,e){ft.cssHooks[e]=j(dt.pixelPosition,function(t,n){if(n)return n=le(t,e),re.test(n)?ft(t).position()[e]+"px":n})}),ft.each({Height:"height",Width:"width"},function(t,e){ft.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){ft.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===r?"margin":"border");return It(this,function(e,n,i){var r;return ft.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?ft.css(e,n,a):ft.style(e,n,i,a)},e,o?i:void 0,o,null)}})}),ft.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),ft.fn.size=function(){return this.length},ft.fn.andSelf=ft.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ft});var Ke=t.jQuery,Ze=t.$;return ft.noConflict=function(e){return t.$===ft&&(t.$=Ze),e&&t.jQuery===ft&&(t.jQuery=Ke),ft},e||(t.jQuery=t.$=ft),ft}),window.Modernizr=function(t,e,n){function i(t){g.cssText=t}function r(t,e){return i(x.join(t+";")+(e||""))}function o(t,e){return typeof t===e}function a(t,e){return!!~(""+t).indexOf(e)}function s(t,e){for(var i in t){var r=t[i];if(!a(r,"-")&&g[r]!==n)return"pfx"!=e||r}return!1}function l(t,e,i){for(var r in t){var a=e[t[r]];if(a!==n)return!1===i?t[r]:o(a,"function")?a.bind(i||e):a}return!1}function c(t,e,n){var i=t.charAt(0).toUpperCase()+t.slice(1),r=(t+" "+T.join(i+" ")+i).split(" ");return o(e,"string")||o(e,"undefined")?s(r,e):(r=(t+" "+C.join(i+" ")+i).split(" "),l(r,e,n))}var u,d,f={},p=e.documentElement,h="modernizr",m=e.createElement(h),g=m.style,v=e.createElement("input"),y=":)",b={}.toString,x=" -webkit- -moz- -o- -ms- ".split(" "),w="Webkit Moz O ms",T=w.split(" "),C=w.toLowerCase().split(" "),E={svg:"http://www.w3.org/2000/svg"},S={},k={},N={},$=[],A=$.slice,D=function(t,n,i,r){var o,a,s,l,c=e.createElement("div"),u=e.body,d=u||e.createElement("body");if(parseInt(i,10))for(;i--;)s=e.createElement("div"),s.id=r?r[i]:h+(i+1),c.appendChild(s);return o=["&#173;",'<style id="s',h,'">',t,"</style>"].join(""),c.id=h,(u?c:d).innerHTML+=o,d.appendChild(c),u||(d.style.background="",d.style.overflow="hidden",l=p.style.overflow,p.style.overflow="hidden",p.appendChild(d)),a=n(c,t),u?c.parentNode.removeChild(c):(d.parentNode.removeChild(d),p.style.overflow=l),!!a},j=function(e){var n=t.matchMedia||t.msMatchMedia;if(n)return n(e)&&n(e).matches||!1;var i;return D("@media "+e+" { #"+h+" { position: absolute; } }",function(e){i="absolute"==(t.getComputedStyle?getComputedStyle(e,null):e.currentStyle).position}),i},L=function(){function t(t,r){r=r||e.createElement(i[t]||"div"),t="on"+t;var a=t in r;return a||(r.setAttribute||(r=e.createElement("div")),r.setAttribute&&r.removeAttribute&&(r.setAttribute(t,""),a=o(r[t],"function"),o(r[t],"undefined")||(r[t]=n),r.removeAttribute(t))),r=null,a}var i={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return t}(),O={}.hasOwnProperty;d=o(O,"undefined")||o(O.call,"undefined")?function(t,e){return e in t&&o(t.constructor.prototype[e],"undefined")}:function(t,e){return O.call(t,e)},Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if("function"!=typeof e)throw new TypeError;var n=A.call(arguments,1),i=function(){if(this instanceof i){var r=function(){};r.prototype=e.prototype;var o=new r,a=e.apply(o,n.concat(A.call(arguments)));return Object(a)===a?a:o}return e.apply(t,n.concat(A.call(arguments)))};return i}),S.flexbox=function(){return c("flexWrap")},S.canvas=function(){var t=e.createElement("canvas");return!!t.getContext&&!!t.getContext("2d")},S.canvastext=function(){return!!f.canvas&&!!o(e.createElement("canvas").getContext("2d").fillText,"function")},S.webgl=function(){return!!t.WebGLRenderingContext},S.touch=function(){var n;return"ontouchstart"in t||t.DocumentTouch&&e instanceof DocumentTouch?n=!0:D(["@media (",x.join("touch-enabled),("),h,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(t){n=9===t.offsetTop}),n},S.geolocation=function(){return"geolocation"in navigator},S.postmessage=function(){return!!t.postMessage},S.websqldatabase=function(){return!!t.openDatabase},S.indexedDB=function(){return!!c("indexedDB",t)},S.hashchange=function(){return L("hashchange",t)&&(e.documentMode===n||e.documentMode>7)},S.history=function(){return!!t.history&&!!history.pushState},S.draganddrop=function(){var t=e.createElement("div");return"draggable"in t||"ondragstart"in t&&"ondrop"in t},S.websockets=function(){return"WebSocket"in t||"MozWebSocket"in t},S.rgba=function(){return i("background-color:rgba(150,255,150,.5)"),a(g.backgroundColor,"rgba")},S.hsla=function(){return i("background-color:hsla(120,40%,100%,.5)"),a(g.backgroundColor,"rgba")||a(g.backgroundColor,"hsla")},S.multiplebgs=function(){return i("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(g.background)},S.backgroundsize=function(){return c("backgroundSize")},S.borderimage=function(){return c("borderImage")},S.borderradius=function(){return c("borderRadius")},S.boxshadow=function(){return c("boxShadow")},S.textshadow=function(){return""===e.createElement("div").style.textShadow},S.opacity=function(){return r("opacity:.55"),/^0.55$/.test(g.opacity)},S.cssanimations=function(){return c("animationName")},S.csscolumns=function(){return c("columnCount")},S.cssgradients=function(){var t="background-image:";return i((t+"-webkit- ".split(" ").join("gradient(linear,left top,right bottom,from(#9f9),to(white));"+t)+x.join("linear-gradient(left top,#9f9, white);"+t)).slice(0,-t.length)),a(g.backgroundImage,"gradient")},S.cssreflections=function(){return c("boxReflect")},S.csstransforms=function(){return!!c("transform")},S.csstransforms3d=function(){var t=!!c("perspective");return t&&"webkitPerspective"in p.style&&D("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(e,n){t=9===e.offsetLeft&&3===e.offsetHeight}),t},S.csstransitions=function(){return c("transition")},S.fontface=function(){var t;return D('@font-face {font-family:"font";src:url("https://")}',function(n,i){var r=e.getElementById("smodernizr"),o=r.sheet||r.styleSheet,a=o?o.cssRules&&o.cssRules[0]?o.cssRules[0].cssText:o.cssText||"":"";t=/src/i.test(a)&&0===a.indexOf(i.split(" ")[0])}),t},S.generatedcontent=function(){var t;return D(["#",h,"{font:0/0 a}#",h,':after{content:"',y,'";visibility:hidden;font:3px/1 a}'].join(""),function(e){t=e.offsetHeight>=3}),t},S.video=function(){var t=e.createElement("video"),n=!1;try{(n=!!t.canPlayType)&&(n=new Boolean(n),n.ogg=t.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=t.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=t.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(t){}return n},S.audio=function(){var t=e.createElement("audio"),n=!1;try{(n=!!t.canPlayType)&&(n=new Boolean(n),n.ogg=t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=t.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=t.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(t.canPlayType("audio/x-m4a;")||t.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(t){}return n},S.localstorage=function(){try{return localStorage.setItem(h,h),localStorage.removeItem(h),!0}catch(t){return!1}},S.sessionstorage=function(){try{return sessionStorage.setItem(h,h),sessionStorage.removeItem(h),!0}catch(t){return!1}},S.webworkers=function(){return!!t.Worker},S.applicationcache=function(){return!!t.applicationCache},S.svg=function(){return!!e.createElementNS&&!!e.createElementNS(E.svg,"svg").createSVGRect},S.inlinesvg=function(){var t=e.createElement("div");return t.innerHTML="<svg/>",(t.firstChild&&t.firstChild.namespaceURI)==E.svg},S.smil=function(){return!!e.createElementNS&&/SVGAnimate/.test(b.call(e.createElementNS(E.svg,"animate")))},S.svgclippaths=function(){return!!e.createElementNS&&/SVGClipPath/.test(b.call(e.createElementNS(E.svg,"clipPath")))};for(var I in S)d(S,I)&&(u=I.toLowerCase(),f[u]=S[I](),$.push((f[u]?"":"no-")+u));return f.input||function(){f.input=function(n){for(var i=0,r=n.length;i<r;i++)N[n[i]]=n[i]in v;return N.list&&(N.list=!!e.createElement("datalist")&&!!t.HTMLDataListElement),N}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),f.inputtypes=function(t){for(var i,r,o,a=0,s=t.length;a<s;a++)v.setAttribute("type",r=t[a]),i="text"!==v.type,i&&(v.value=y,v.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(r)&&v.style.WebkitAppearance!==n?(p.appendChild(v),o=e.defaultView,i=o.getComputedStyle&&"textfield"!==o.getComputedStyle(v,null).WebkitAppearance&&0!==v.offsetHeight,p.removeChild(v)):/^(search|tel)$/.test(r)||(i=/^(url|email)$/.test(r)?v.checkValidity&&!1===v.checkValidity():v.value!=y)),k[t[a]]=!!i;return k}("search tel url email datetime date month week time datetime-local number range color".split(" "))}(),f.addTest=function(t,e){if("object"==typeof t)for(var i in t)d(t,i)&&f.addTest(i,t[i]);else{if(t=t.toLowerCase(),f[t]!==n)return f;e="function"==typeof e?e():e,p.className+=" "+(e?"":"no-")+t,f[t]=e}return f},i(""),m=v=null,function(t,e){function n(t,e){var n=t.createElement("p"),i=t.getElementsByTagName("head")[0]||t.documentElement;return n.innerHTML="x<style>"+e+"</style>",i.insertBefore(n.lastChild,i.firstChild)}function i(){var t=v.elements;return"string"==typeof t?t.split(" "):t}function r(t){var e=g[t[h]];return e||(e={},m++,t[h]=m,g[m]=e),e}function o(t,n,i){if(n||(n=e),u)return n.createElement(t);i||(i=r(n));var o;return o=i.cache[t]?i.cache[t].cloneNode():p.test(t)?(i.cache[t]=i.createElem(t)).cloneNode():i.createElem(t),!o.canHaveChildren||f.test(t)||o.tagUrn?o:i.frag.appendChild(o)}function a(t,n){if(t||(t=e),u)return t.createDocumentFragment();n=n||r(t);for(var o=n.frag.cloneNode(),a=0,s=i(),l=s.length;a<l;a++)o.createElement(s[a]);return o}function s(t,e){e.cache||(e.cache={},e.createElem=t.createElement,e.createFrag=t.createDocumentFragment,e.frag=e.createFrag()),t.createElement=function(n){return v.shivMethods?o(n,t,e):e.createElem(n)},t.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+i().join().replace(/[\w\-]+/g,function(t){return e.createElem(t),e.frag.createElement(t),'c("'+t+'")'})+");return n}")(v,e.frag)}function l(t){t||(t=e);var i=r(t);return v.shivCSS&&!c&&!i.hasCSS&&(i.hasCSS=!!n(t,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),u||s(t,i),t}var c,u,d=t.html5||{},f=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,p=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,h="_html5shiv",m=0,g={};!function(){try{var t=e.createElement("a");t.innerHTML="<xyz></xyz>",c="hidden"in t,u=1==t.childNodes.length||function(){e.createElement("a");var t=e.createDocumentFragment();return void 0===t.cloneNode||void 0===t.createDocumentFragment||void 0===t.createElement}()}catch(t){c=!0,u=!0}}();var v={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:"3.7.0",shivCSS:!1!==d.shivCSS,supportsUnknownElements:u,shivMethods:!1!==d.shivMethods,type:"default",shivDocument:l,createElement:o,createDocumentFragment:a};t.html5=v,l(e)}(this,e),f._version="2.8.3",f._prefixes=x,f._domPrefixes=C,f._cssomPrefixes=T,f.mq=j,f.hasEvent=L,f.testProp=function(t){return s([t])},f.testAllProps=c,f.testStyles=D,f.prefixed=function(t,e,n){return e?c(t,e,n):c(t,"pfx")},p.className=p.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+" js "+$.join(" "),f}(this,this.document),function(t,e,n){function i(t){return"[object Function]"==g.call(t)}function r(t){return"string"==typeof t}function o(){}function a(t){return!t||"loaded"==t||"complete"==t||"uninitialized"==t}function s(){var t=v.shift();y=1,t?t.t?h(function(){("c"==t.t?f.injectCss:f.injectJs)(t.s,0,t.a,t.x,t.e,1)},0):(t(),s()):y=0}function l(t,n,i,r,o,l,c){function u(e){if(!p&&a(d.readyState)&&(b.r=p=1,!y&&s(),d.onload=d.onreadystatechange=null,e)){"img"!=t&&h(function(){w.removeChild(d)},50);for(var i in k[n])k[n].hasOwnProperty(i)&&k[n][i].onload()}}var c=c||f.errorTimeout,d=e.createElement(t),p=0,g=0,b={t:i,s:n,e:o,a:l,x:c};1===k[n]&&(g=1,k[n]=[]),"object"==t?d.data=n:(d.src=n,d.type=t),d.width=d.height="0",d.onerror=d.onload=d.onreadystatechange=function(){u.call(this,g)},v.splice(r,0,b),"img"!=t&&(g||2===k[n]?(w.insertBefore(d,x?null:m),h(u,c)):k[n].push(d))}function c(t,e,n,i,o){return y=0,e=e||"j",r(t)?l("c"==e?C:T,t,e,this.i++,n,i,o):(v.splice(this.i++,0,t),1==v.length&&s()),this}function u(){var t=f;return t.loader={load:c,i:0},t}var d,f,p=e.documentElement,h=t.setTimeout,m=e.getElementsByTagName("script")[0],g={}.toString,v=[],y=0,b="MozAppearance"in p.style,x=b&&!!e.createRange().compareNode,w=x?p:m.parentNode,p=t.opera&&"[object Opera]"==g.call(t.opera),p=!!e.attachEvent&&!p,T=b?"object":p?"script":"img",C=p?"script":T,E=Array.isArray||function(t){return"[object Array]"==g.call(t)},S=[],k={},N={timeout:function(t,e){return e.length&&(t.timeout=e[0]),t}};f=function(t){function e(t){var e,n,i,t=t.split("!"),r=S.length,o=t.pop(),a=t.length,o={url:o,origUrl:o,prefixes:t};for(n=0;n<a;n++)i=t[n].split("="),(e=N[i.shift()])&&(o=e(o,i));for(n=0;n<r;n++)o=S[n](o);return o}function a(t,r,o,a,s){var l=e(t),c=l.autoCallback;l.url.split(".").pop().split("?").shift(),l.bypass||(r&&(r=i(r)?r:r[t]||r[a]||r[t.split("/").pop().split("?")[0]]),l.instead?l.instead(t,r,o,a,s):(k[l.url]?l.noexec=!0:k[l.url]=1,o.load(l.url,l.forceCSS||!l.forceJS&&"css"==l.url.split(".").pop().split("?").shift()?"c":n,l.noexec,l.attrs,l.timeout),(i(r)||i(c))&&o.load(function(){u(),r&&r(l.origUrl,s,a),c&&c(l.origUrl,s,a),k[l.url]=2})))}function s(t,e){function n(t,n){if(t){if(r(t))n||(d=function(){var t=[].slice.call(arguments);f.apply(this,t),p()}),a(t,d,e,0,c);else if(Object(t)===t)for(l in s=function(){var e,n=0;for(e in t)t.hasOwnProperty(e)&&n++;return n}(),t)t.hasOwnProperty(l)&&(!n&&!--s&&(i(d)?d=function(){var t=[].slice.call(arguments);f.apply(this,t),p()}:d[l]=function(t){return function(){var e=[].slice.call(arguments);t&&t.apply(this,e),p()}}(f[l])),a(t[l],d,e,l,c))}else!n&&p()}var s,l,c=!!t.test,u=t.load||t.both,d=t.callback||o,f=d,p=t.complete||o;n(c?t.yep:t.nope,!!u),u&&n(u)}var l,c,d=this.yepnope.loader;if(r(t))a(t,0,d,0);else if(E(t))for(l=0;l<t.length;l++)c=t[l],r(c)?a(c,0,d,0):E(c)?f(c):Object(c)===c&&s(c,d);else Object(t)===t&&s(t,d)},f.addPrefix=function(t,e){N[t]=e},f.addFilter=function(t){S.push(t)},f.errorTimeout=1e4,null==e.readyState&&e.addEventListener&&(e.readyState="loading",e.addEventListener("DOMContentLoaded",d=function(){e.removeEventListener("DOMContentLoaded",d,0),e.readyState="complete"},0)),t.yepnope=u(),t.yepnope.executeStack=s,t.yepnope.injectJs=function(t,n,i,r,l,c){var u,d,p=e.createElement("script"),r=r||f.errorTimeout;p.src=t;for(d in i)p.setAttribute(d,i[d]);n=c?s:n||o,p.onreadystatechange=p.onload=function(){!u&&a(p.readyState)&&(u=1,n(),p.onload=p.onreadystatechange=null)},h(function(){u||(u=1,n(1))},r),l?p.onload():m.parentNode.insertBefore(p,m)},t.yepnope.injectCss=function(t,n,i,r,a,l){var c,r=e.createElement("link"),n=l?s:n||o;r.href=t,r.rel="stylesheet",r.type="text/css";for(c in i)r.setAttribute(c,i[c]);a||(m.parentNode.insertBefore(r,m),h(n,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))},function(t){"use strict";t.matchMedia=t.matchMedia||function(t){var e,n=t.documentElement,i=n.firstElementChild||n.firstChild,r=t.createElement("body"),o=t.createElement("div");return o.id="mq-test-1",o.style.cssText="position:absolute;top:-100em",r.style.background="none",r.appendChild(o),function(t){return o.innerHTML='&shy;<style media="'+t+'"> #mq-test-1 { width: 42px; }</style>',n.insertBefore(r,i),e=42===o.offsetWidth,n.removeChild(r),{matches:e,media:t}}}(t.document)}(this),function(t){"use strict";function e(){x(!0)}var n={};t.respond=n,n.update=function(){};var i=[],r=function(){var e=!1;try{e=new t.XMLHttpRequest}catch(n){e=new t.ActiveXObject("Microsoft.XMLHTTP")}return function(){return e}}(),o=function(t,e){var n=r();n&&(n.open("GET",t,!0),n.onreadystatechange=function(){4!==n.readyState||200!==n.status&&304!==n.status||e(n.responseText)},4!==n.readyState&&n.send(null))},a=function(t){return t.replace(n.regex.minmaxwh,"").match(n.regex.other)};if(n.ajax=o,n.queue=i,n.unsupportedmq=a,n.regex={media:/@media[^\{]+\{([^\{\}]*\{[^\}\{]*\})+/gi,keyframes:/@(?:\-(?:o|moz|webkit)\-)?keyframes[^\{]+\{(?:[^\{\}]*\{[^\}\{]*\})+[^\}]*\}/gi,comments:/\/\*[^*]*\*+([^\/][^*]*\*+)*\//gi,urls:/(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,findStyles:/@media *([^\{]+)\{([\S\s]+?)$/,only:/(only\s+)?([a-zA-Z]+)\s?/,minw:/\(\s*min\-width\s*:\s*(\s*[0-9\.]+)(px|em)\s*\)/,maxw:/\(\s*max\-width\s*:\s*(\s*[0-9\.]+)(px|em)\s*\)/,minmaxwh:/\(\s*m(in|ax)\-(height|width)\s*:\s*(\s*[0-9\.]+)(px|em)\s*\)/gi,other:/\([^\)]*\)/g},n.mediaQueriesSupported=t.matchMedia&&null!==t.matchMedia("only all")&&t.matchMedia("only all").matches,!n.mediaQueriesSupported){var s,l,c,u=t.document,d=u.documentElement,f=[],p=[],h=[],m={},g=u.getElementsByTagName("head")[0]||d,v=u.getElementsByTagName("base")[0],y=g.getElementsByTagName("link"),b=function(){var t,e=u.createElement("div"),n=u.body,i=d.style.fontSize,r=n&&n.style.fontSize,o=!1;return e.style.cssText="position:absolute;font-size:1em;width:1em",n||(n=o=u.createElement("body"),n.style.background="none"),d.style.fontSize="100%",n.style.fontSize="100%",n.appendChild(e),o&&d.insertBefore(n,d.firstChild),t=e.offsetWidth,o?d.removeChild(n):n.removeChild(e),d.style.fontSize=i,r&&(n.style.fontSize=r),t=c=parseFloat(t)},x=function(e){var n="clientWidth",i=d[n],r="CSS1Compat"===u.compatMode&&i||u.body[n]||i,o={},a=y[y.length-1],m=(new Date).getTime();if(e&&s&&30>m-s)return t.clearTimeout(l),void(l=t.setTimeout(x,30));s=m;for(var v in f)if(f.hasOwnProperty(v)){var w=f[v],T=w.minw,C=w.maxw,E=null===T,S=null===C;T&&(T=parseFloat(T)*(T.indexOf("em")>-1?c||b():1)),C&&(C=parseFloat(C)*(C.indexOf("em")>-1?c||b():1)),w.hasquery&&(E&&S||!(E||r>=T)||!(S||C>=r))||(o[w.media]||(o[w.media]=[]),o[w.media].push(p[w.rules]))}for(var k in h)h.hasOwnProperty(k)&&h[k]&&h[k].parentNode===g&&g.removeChild(h[k]);h.length=0;for(var N in o)if(o.hasOwnProperty(N)){var $=u.createElement("style"),A=o[N].join("\n");$.type="text/css",$.media=N,g.insertBefore($,a.nextSibling),$.styleSheet?$.styleSheet.cssText=A:$.appendChild(u.createTextNode(A)),h.push($)}},w=function(t,e,i){var r=t.replace(n.regex.comments,"").replace(n.regex.keyframes,"").match(n.regex.media),o=r&&r.length||0;e=e.substring(0,e.lastIndexOf("/"));var s=function(t){return t.replace(n.regex.urls,"$1"+e+"$2$3")},l=!o&&i;e.length&&(e+="/"),l&&(o=1);for(var c=0;o>c;c++){var u,d,h,m;l?(u=i,p.push(s(t))):(u=r[c].match(n.regex.findStyles)&&RegExp.$1,p.push(RegExp.$2&&s(RegExp.$2))),h=u.split(","),m=h.length;for(var g=0;m>g;g++)d=h[g],a(d)||f.push({media:d.split("(")[0].match(n.regex.only)&&RegExp.$2||"all",rules:p.length-1,hasquery:d.indexOf("(")>-1,minw:d.match(n.regex.minw)&&parseFloat(RegExp.$1)+(RegExp.$2||""),maxw:d.match(n.regex.maxw)&&parseFloat(RegExp.$1)+(RegExp.$2||"")})}x()},T=function(){if(i.length){var e=i.shift();o(e.href,function(n){w(n,e.href,e.media),m[e.href]=!0,t.setTimeout(function(){T()},0)})}},C=function(){for(var e=0;e<y.length;e++){var n=y[e],r=n.href,o=n.media,a=n.rel&&"stylesheet"===n.rel.toLowerCase();r&&a&&!m[r]&&(n.styleSheet&&n.styleSheet.rawCssText?(w(n.styleSheet.rawCssText,r,o),m[r]=!0):(!/^([a-zA-Z:]*\/\/)/.test(r)&&!v||r.replace(RegExp.$1,"").split("/")[0]===t.location.host)&&("//"===r.substring(0,2)&&(r=t.location.protocol+r),i.push({href:r,media:o})))}T()};C(),n.update=C,n.getEmValue=b,t.addEventListener?t.addEventListener("resize",e,!1):t.attachEvent&&t.attachEvent("onresize",e)}}(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
